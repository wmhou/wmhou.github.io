<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HOU</title>
  
  <subtitle>取法于上，仅得为中，取法于中，故为其下！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-22T15:29:03.288Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HOU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chapter6.2 Connection和Iterator接口</title>
    <link href="http://yoursite.com/2018/12/22/JavaSE/Chapter6%20%E9%9B%86%E5%90%88/2%E3%80%81Connection%E5%92%8CIterator%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/12/22/JavaSE/Chapter6 集合/2、Connection和Iterator接口/</id>
    <published>2018-12-22T14:00:00.000Z</published>
    <updated>2018-12-22T15:29:03.288Z</updated>
    
    <content type="html"><![CDATA[<p>Connection接口是List、Set、Queue接口的父接口，Connection接口定义的一些操作结合元素的方法，它的子接口自然也可以使用……</p><a id="more"></a><h2 id="2、Connection和Iterator接口"><a href="#2、Connection和Iterator接口" class="headerlink" title="2、Connection和Iterator接口"></a>2、Connection和Iterator接口</h2><h3 id="Collection接口："><a href="#Collection接口：" class="headerlink" title="Collection接口："></a>Collection接口：</h3><p>Connection接口是List、Set、Queue接口的父接口，Connection接口定义的一些操作结合元素的方法，它的子接口自然也可以使用，我们看一下Connection里面有些什么通用方法：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Boolean add(Object o)</td><td>向集合中添加一个对象的引用</td></tr><tr><td>Void clear()</td><td>删除集合中的所有对象，即不再持有这些对象的引用</td></tr><tr><td>Boolean contains(Object o)</td><td>判断在集合中是否持有特定对象的引用</td></tr><tr><td>Boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>Iterator iterator()</td><td>返回一个Iterator对象，可用它来遍历集合中的元素</td></tr><tr><td>Boolean remove(Object o)</td><td>从集合中删除一个对象的引用</td></tr><tr><td>Boolean retainAll(Collection&lt;?&gt; c)</td><td>保留集合中的指定内容</td></tr><tr><td>Int size()</td><td>返回集合中元素的数目</td></tr><tr><td>Object[] toArray()</td><td>返回一个数组，该数组包含集合中的所有元素</td></tr><tr><td>Boolean equals(Object o)</td><td>对象比较</td></tr><tr><td>Int hashCode()</td><td>返回hash码</td></tr></tbody></table><p>这些方法来源与API文档，用时查阅即可，我们写一个小程序来演示一下这些方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">"元素"</span>);</span><br><span class="line">        collection.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"collection集合中元素个数为："</span> + collection.size());</span><br><span class="line"></span><br><span class="line">        collection.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"collection集合中元素个数为："</span> + collection.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"collection集合中是否包含\"添加元素\"字符串："</span> + collection.contains(<span class="string">"元素"</span>));</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"collection集合中的元素是："</span> + collection);</span><br><span class="line"></span><br><span class="line">        Collection collection1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">        collection1.add(<span class="string">"HashSet元素"</span>);</span><br><span class="line">        collection1.addAll(collection);</span><br><span class="line">        System.out.println(<span class="string">"collection1集合中的元素是："</span> + collection1);</span><br><span class="line"></span><br><span class="line">        collection1.clear();</span><br><span class="line">        System.out.println(<span class="string">"collection1集合中的元素个数是："</span> + collection1.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collection集合中元素个数为：<span class="number">2</span></span><br><span class="line">collection集合中元素个数为：<span class="number">1</span></span><br><span class="line">collection集合中是否包含<span class="string">"添加元素"</span>字符串：<span class="keyword">true</span></span><br><span class="line">collection集合中的元素是：[元素, <span class="number">5</span>]</span><br><span class="line">collection1集合中的元素是：[HashSet元素, <span class="number">5</span>, 元素]</span><br><span class="line">collection1集合中的元素个数是：<span class="number">0</span></span><br></pre></td></tr></table></figure><p>以上演示了Collection接口中定义的一些常用方法：有添加元素、删除元素、返回个数、清空等，当我们直接打印的时候，会输出[…, …, …]这样的数据结构，很显然是有重写了toString()方法，那么如果我们要遍历集合元素呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionEach</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection computer = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        computer.add(<span class="string">"Dell"</span>);</span><br><span class="line">        computer.add(<span class="string">"ThinkPad"</span>);</span><br><span class="line">        computer.add(<span class="string">"MacBook"</span>);</span><br><span class="line">        computer.add(<span class="string">"Huawei"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// foreach循环遍历元素</span></span><br><span class="line">        <span class="keyword">for</span> (Object str : computer) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// lambda表达式foreach循环遍历元素</span></span><br><span class="line">        computer.forEach(obj -&gt; System.out.println(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种遍历方式都可以输出Collection集合的所有元素，我们看到Collection中放入的元素默认都是Object类型，我们通常不会这样做，一般情况下都会使用泛型来约束集合中元素的类型。当然除了这种方法，我们还可以直接使用for循环，或者下面我们要说的另一个接口Iterator来进行迭代：</p><h3 id="Iterator接口："><a href="#Iterator接口：" class="headerlink" title="Iterator接口："></a>Iterator接口：</h3><p>Iterator接口同样是集合框架中存在的接口，他是独立于Collection和Map的另一个接口，也叫迭代器，主要用于遍历集合元素，Iterator接口定义了四个方法，我们用一个小程序演示一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Iterator迭代器遍历集合</span></span><br><span class="line">Iterator iterator = computer.iterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEachRemaining方法：java8提供使用Lambda表达式遍历集合</span></span><br><span class="line">iterator.forEachRemaining(obj -&gt; System.out.println(<span class="string">"迭代集合元素："</span> + obj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// hasNext:返回是否还有下一个元素的判断</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="comment">// next:返回集合中的下一个元素</span></span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">    <span class="keyword">if</span> (iterator.next().equals(<span class="string">"MacBook"</span>)) &#123;</span><br><span class="line">        <span class="comment">// remove:删除上一次next方法返回的元素</span></span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator接口的方法比较简单，它主要的用途就是遍历集合。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter6" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Connection接口是List、Set、Queue接口的父接口，Connection接口定义的一些操作结合元素的方法，它的子接口自然也可以使用……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter6 集合" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter6-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Connection" scheme="http://yoursite.com/tags/Connection/"/>
    
      <category term="Iterator" scheme="http://yoursite.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>Chapter6.1 集合框架概述</title>
    <link href="http://yoursite.com/2018/12/21/JavaSE/Chapter6%20%E9%9B%86%E5%90%88/1%E3%80%81%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/12/21/JavaSE/Chapter6 集合/1、集合框架概述/</id>
    <published>2018-12-21T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:57.138Z</updated>
    
    <content type="html"><![CDATA[<p>在Java实际编程中，常常需要存放多个数据，我们可以用之前说的数组来保存多个对象，但是数组的长度是不可变化的，这就限制了它的使用场景，更为重要的是，数组不能使用key-value键值对的方式存储数据……</p><a id="more"></a><h2 id="1、集合框架概述"><a href="#1、集合框架概述" class="headerlink" title="1、集合框架概述"></a>1、集合框架概述</h2><p>在Java实际编程中，常常需要存放多个数据，我们可以用之前说的数组来保存多个对象，但是数组的长度是不可变化的，这就限制了它的使用场景，更为重要的是，数组不能使用key-value键值对的方式存储数据。为了解决这一些问题，才引入的集合的概念，集合主要用于存储其他数据，也被叫做容器类。还有一点不同于数组的特性是：数组可以用来存储基本类型和引用类型的数据，但是集合只能用来保存引用类型数据。</p><p>java的集合类主要由两个接口派生而出：Collection和Map，这二者是Java集合框架的根接口，他们又派生出了一些子接口和实现类，我们看一下继承树：</p><p><img src="image/1.png" alt="集合框架继承树"></p><p>从上面的集合框架图可以看到，Java集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键值对映射。Collection接口又有3种子类型，List、Set和Queue，再下面是一些抽象类，最后是具体实现类，常用的有ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap等。</p><p>下面我们详细看一下这些集合类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Java实际编程中，常常需要存放多个数据，我们可以用之前说的数组来保存多个对象，但是数组的长度是不可变化的，这就限制了它的使用场景，更为重要的是，数组不能使用key-value键值对的方式存储数据……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter6 集合" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter6-%E9%9B%86%E5%90%88/"/>
    
    
      <category term="集合框架" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.9 枚举</title>
    <link href="http://yoursite.com/2018/12/20/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/09%E3%80%81%E6%9E%9A%E4%B8%BE/"/>
    <id>http://yoursite.com/2018/12/20/JavaSE/Chapter5 面向对象/09、枚举/</id>
    <published>2018-12-20T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:53.891Z</updated>
    
    <content type="html"><![CDATA[<p>枚举是在Java5中引入的新特性，主要用来表示一些固定且有限的类，比如季节、星期和一些特殊的状态等。假设有这样一个场景，我们实现一个购物车的功能，里面有一项内容是商品状态……</p><a id="more"></a><h2 id="9、枚举"><a href="#9、枚举" class="headerlink" title="9、枚举"></a>9、枚举</h2><h4 id="枚举示例"><a href="#枚举示例" class="headerlink" title="枚举示例"></a>枚举示例</h4><p>枚举是在Java5中引入的新特性，主要用来表示一些固定且有限的类，比如季节、星期和一些特殊的状态等。假设有这样一个场景，我们实现一个购物车的功能，里面有一项内容是商品状态，想想我们网上购物的场景，商品的状态可以简单分为：已付款、未付款、已发货、未发货、已签收、未签收这样的状态，我们需要一些固定的状态码来定义这些状态，按照原来的写法，我们可以定义一个ProductStatus类或者接口，来表示状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductStatus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISH_PAY = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOT_PAY = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISH_CONSIGNMENT = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOT_CONSIGNMENT = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FINISI_RECIVE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOT_RECIVE = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例中我们定义的6个int类型的常量，用来对应商品的状态，根据不同的状态我们需要实现不同的功能。很好用是不是，不过试想一下，我们在实现购物车功能的时候是不是需要来回查看商品状态对应的状态码，现在数量比较少还好说，有些项目中会定义一些类似的常量类或者接口，这样，我们每次使用都要去查看具体的常量是不是存在，是不是会引发出一些小问题？那么如果使用枚举呢？看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ProductStatusEnum &#123;</span><br><span class="line">    FINISH_PAY, NOT_PAY, FINISH_CONSIGNMENT,</span><br><span class="line">    NOT_CONSIGNMENT, FINISI_RECIVE, NOT_RECIVE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举使用enum关键字表示，定义的位置类似于class和interface，它也是一种特殊的类型，名称代码规范遵循类名定义规范，通常我们会在枚举名字后加Enum来进行更准确的表达。</p><p>上面的枚举，定义了商品的6个状态，多个值之间用逗号分割。而这些值的调用也很简单，直接用枚举名调用就可以，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 枚举类型赋值</span><br><span class="line"></span><br><span class="line">继续从上面的例子来看，如果我们需要特定的索引来表示商品的状态，而且我们同时要做到用中文更清晰地表示状态的话，我们可以这样写：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public enum ProductStatusHasValueEnum &#123;</span><br><span class="line">    FINISH_PAY(&quot;已支付&quot;, 1), NOT_PAY(&quot;未支付&quot;, 2), FINISH_CONSIGNMENT(&quot;已发货&quot;, 3),</span><br><span class="line">    NOT_CONSIGNMENT(&quot;未发货&quot;, 4), FINISI_RECIVE(&quot;已签收&quot;, 5), NOT_RECIVE(&quot;未签收&quot;, 6);</span><br><span class="line"></span><br><span class="line">    private String status;</span><br><span class="line">    private int index;</span><br><span class="line"></span><br><span class="line">    ProductStatusHasValueEnum(String status, int index) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">        this.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getStatus(int index) &#123;</span><br><span class="line">        for (ProductStatusHasValueEnum status : ProductStatusHasValueEnum.values()) &#123;</span><br><span class="line">            if (status.getIndex() == index) &#123;</span><br><span class="line">                return status.getStatus();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getStatus() &#123;</span><br><span class="line">        return status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStatus(String status) &#123;</span><br><span class="line">        this.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getIndex() &#123;</span><br><span class="line">        return index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIndex(int index) &#123;</span><br><span class="line">        this.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int index = 2;</span><br><span class="line">        String status = ProductStatusHasValueEnum.getStatus(index);</span><br><span class="line">        System.out.println(&quot;index = &quot; + index + &quot;的商品状态是：&quot; + status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这个实例的main方法中，我们可以根据传入的索引值找到对应的商品状态，以上实例中我们为商品状态赋予了说明和索引值，并且添加了构造器、普通方法和getter/setter方法，是不是和一个类很相似，需要注意的是，当我们为枚举中的参数赋值的时候，需要手动加入构造方法，构造方法中的参数根据枚举参数传入的值来确定，实例中我们为参数赋予一个String和一个int类型的值，此时构造器中也要存在这样的值，试想一下，有构造器我们就可以实例化枚举的对象了，要正确使用这个构造器创建对象，就要实例化其中的参数。</p><p>但是枚举类型的构造器默认并没有写出，事实上枚举类的构造器是private的，枚举类型不能被实例化，我们一般也不会采用像上例中的写法，因为我们主要用到的是枚举最前面定义的枚举值。</p><p>这样，除了枚举开始的的状态和构造器这一部分，其余是不是和一个普通的java类完全一样了？但是区别还是很大的，我们知道每一个class都默认集成java.lang.Object类，但是枚举类不是的，它默认继承java.lang.Enum类，下面看一下Enum类的常见方法。</p><h4 id="枚举的常见方法"><a href="#枚举的常见方法" class="headerlink" title="枚举的常见方法"></a>枚举的常见方法</h4><p>下面列举了枚举的常见方法：</p><p><img src="image/enum.png" alt=""></p><p>继续使用上面的实例，看一下这些方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ProductStatusEnum &#123;</span><br><span class="line">    FINISH_PAY, NOT_PAY, FINISH_CONSIGNMENT,</span><br><span class="line">    NOT_CONSIGNMENT, FINISI_RECIVE, NOT_RECIVE</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductStatusEnumMethods</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建枚举类数组</span></span><br><span class="line">        ProductStatusEnum[] status = <span class="keyword">new</span> ProductStatusEnum[]&#123;ProductStatusEnum.FINISH_PAY, ProductStatusEnum.NOT_PAY,</span><br><span class="line">                ProductStatusEnum.FINISH_CONSIGNMENT, ProductStatusEnum.NOT_CONSIGNMENT,</span><br><span class="line">                ProductStatusEnum.FINISI_RECIVE, ProductStatusEnum.NOT_RECIVE&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; status.length; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"status["</span> + i + <span class="string">"].ordinal(): "</span> + status[i].ordinal());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过compareTo方法比较,实际上其内部是通过ordinal()值比较的</span></span><br><span class="line">        System.out.println(<span class="string">"status[0].compareTo(status[1]): "</span> + status[<span class="number">0</span>].compareTo(status[<span class="number">1</span>]));</span><br><span class="line">        System.out.println(<span class="string">"status[0].compareTo(status[2]): "</span> + status[<span class="number">0</span>].equals(status[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = status[<span class="number">0</span>].getDeclaringClass();</span><br><span class="line">        System.out.println(<span class="string">"clazz: "</span> + clazz);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// name()</span></span><br><span class="line">        System.out.println(<span class="string">"status[0].name(): "</span> + status[<span class="number">0</span>].name());</span><br><span class="line">        System.out.println(<span class="string">"status[1].name(): "</span> + status[<span class="number">1</span>].name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toString()</span></span><br><span class="line">        System.out.println(<span class="string">"status[2].toString(): "</span> + status[<span class="number">2</span>].toString());</span><br><span class="line">        System.out.println(<span class="string">"status[3].toString(): "</span> + status[<span class="number">3</span>].toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        ProductStatusEnum statusEnum = Enum.valueOf(ProductStatusEnum.class, status[<span class="number">4</span>].name());</span><br><span class="line">        System.out.println(<span class="string">"statusEnum："</span> + statusEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际执行结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">status[<span class="number">0</span>].ordinal(): <span class="number">0</span></span><br><span class="line">status[<span class="number">1</span>].ordinal(): <span class="number">1</span></span><br><span class="line">status[<span class="number">2</span>].ordinal(): <span class="number">2</span></span><br><span class="line">status[<span class="number">3</span>].ordinal(): <span class="number">3</span></span><br><span class="line">status[<span class="number">4</span>].ordinal(): <span class="number">4</span></span><br><span class="line">status[<span class="number">5</span>].ordinal(): <span class="number">5</span></span><br><span class="line">----------------------------------</span><br><span class="line">status[<span class="number">0</span>].compareTo(status[<span class="number">1</span>]): -<span class="number">1</span></span><br><span class="line">status[<span class="number">0</span>].compareTo(status[<span class="number">2</span>]): <span class="keyword">false</span></span><br><span class="line">clazz: <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">wmhou</span>.<span class="title">chapter5</span>.<span class="title">enumdemo</span>.<span class="title">ProductStatusEnum</span></span></span><br><span class="line"><span class="class">----------------------------------</span></span><br><span class="line">status[0].name(): FINISH_PAY</span><br><span class="line">status[<span class="number">1</span>].name(): NOT_PAY</span><br><span class="line">status[<span class="number">2</span>].toString(): FINISH_CONSIGNMENT</span><br><span class="line">status[<span class="number">3</span>].toString(): NOT_CONSIGNMENT</span><br><span class="line">----------------------------------</span><br><span class="line">statusEnum：FINISI_RECIVE</span><br></pre></td></tr></table></figure><p>再说一下，使用枚举要注意几个地方，避免错误使用：</p><ol><li>enum 类型不支持 public 和 protected 修饰符的构造方法，因此构造函数一定要是 private 或 friendly 的。也正因为如此，所以枚举对象是无法在程序中通过直接调用其构造方法来初始化的。</li><li>定义 enum 类型时候，如果是简单类型，那么最后一个枚举值后不用跟任何一个符号；但如果有定制方法，那么最后一个枚举值与后面代码要用分号’;’隔开，不能用逗号或空格。</li><li>由于 enum 类型的值实际上是通过运行期构造出对象来表示的，所以在 cluster 环境下，每个虚拟机都会构造出一个同义的枚举对象。因而在做比较操作时候就需要注意，如果直接通过使用等号 ( ‘ == ’ ) 操作符，这些看似一样的枚举值一定不相等，因为这不是同一个对象实例。</li></ol><p>上述部分列举了关于Enum的基本内容，这些内容基本可以满足日常开发中对枚举的使用，当然枚举的内容不会只有这些，更多的内容等以后用到再继续更新。Enum 类型提出给 JAVA 编程带了了极大的便利，让程序的控制更加的容易，也不容易出现错误。所以在遇到需要控制程序流程时候，可以多想想是否可以利用 enum 来实现。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/enumdemo" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;枚举是在Java5中引入的新特性，主要用来表示一些固定且有限的类，比如季节、星期和一些特殊的状态等。假设有这样一个场景，我们实现一个购物车的功能，里面有一项内容是商品状态……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="枚举" scheme="http://yoursite.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.8 Lambda表达式</title>
    <link href="http://yoursite.com/2018/12/19/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/08%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/12/19/JavaSE/Chapter5 面向对象/08、Lambda表达式/</id>
    <published>2018-12-19T14:00:00.000Z</published>
    <updated>2018-12-23T14:34:57.311Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda表达式是Java8的新特性，它支持将代码块作为参数进行传递，这个特性我们之前是没有接触过的，在Java中定义的方法不可能完全独立，也不能将方法作为参数或者返回一个方法，Lambda可以做到这一点……</p><a id="more"></a><h2 id="8、Lambda表达式"><a href="#8、Lambda表达式" class="headerlink" title="8、Lambda表达式"></a>8、Lambda表达式</h2><p>Lambda表达式是Java8的新特性，它支持将代码块作为参数进行传递，这个特性我们之前是没有接触过的，在Java中定义的方法不可能完全独立，也不能将方法作为参数或者返回一个方法，Lambda可以做到这一点。</p><h4 id="Lambda简介"><a href="#Lambda简介" class="headerlink" title="Lambda简介"></a>Lambda简介</h4><p>简单来说，Lambda表达式就是没有声明的方法，也就是说没有访问修饰符、返回值和名字。当某个方法只使用一次而且定义很简短，就不必在类中再去定义一个这样的方法了。</p><p>它的语法结构是（argument）-&gt;（body）语法书写，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(arg1, arg2, ...) -&gt; &#123;body&#125;</span><br><span class="line">(type1 arg1, type2 arg2, ...) -&gt; &#123;body&#125;</span><br></pre></td></tr></table></figure><h4 id="Lambda表达式结构"><a href="#Lambda表达式结构" class="headerlink" title="Lambda表达式结构"></a>Lambda表达式结构</h4><p>根据上面语法示例看一下Lambda表达式的结构：</p><ul><li>一个表达式可以有0个或者多个参数；</li><li>参数类型可以明确声明，也可以根据上下文推断；</li><li>参数包含在小括号之内，相互之间用逗号分割；</li><li>只有一个参数且类型可以根据上下文得到时，小括号可以省略；</li><li>当表达式主体中只有一条语句，大括号可以省略，如果有多条，大括号必须存在。</li></ul><h4 id="Lambda表达式与函数式接口"><a href="#Lambda表达式与函数式接口" class="headerlink" title="Lambda表达式与函数式接口"></a>Lambda表达式与函数式接口</h4><p>在Java中，函数式接口是只包含一个抽象方法声明的接口，例如<figure class="highlight plain"><figcaption><span>run()```，如果要去实现这个接口，进而实例化对象，我们通常会使用implements的方式，此外还可以使用匿名内部类来实例化一个对象，而使用Lambda则更加简便，如下：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class LambdaDemoImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test(Runnable runnable)&#123;</span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        // 匿名内部类</span><br><span class="line">        test(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;Anonymous class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">// 使用Lambda表达式</span><br><span class="line">        test( () -&gt; System.out.println(&quot;Lambda expression&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Anonymous <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Lambda</span> <span class="title">expression</span></span></span><br></pre></td></tr></table></figure><p>上面的例子里，我们使用Runnable函数式接口并与 Lambda 表达式一起使用。test() 方法现在可以将 Lambda 表达式作为参数。多看几个例子：</p><h4 id="Lambda表达式举例"><a href="#Lambda表达式举例" class="headerlink" title="Lambda表达式举例"></a>Lambda表达式举例</h4><p>线程初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原有方法:</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello thread"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式:</span></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">() -&gt; System.out.println(<span class="string">"Hello thread"</span>)</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>再看一个更神奇的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常规方法</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span> (Integer i: list) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    list.forEach(i -&gt; System.out.println(i));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ：：双冒号操作符将一个常规方法转化为Lambda表达式</span></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个例子，从实例中学习才是最有效的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LambdaInter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exec</span> <span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;Integer&gt; list, LambdaInter&lt;Integer&gt; lambdaInter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer n : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lambdaInter.exec(n)) &#123;</span><br><span class="line">                System.out.print( n + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"打印所有数："</span>);</span><br><span class="line">        test(list, (n) -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"不打印："</span>);</span><br><span class="line">        test(list, (n) -&gt; <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"偶数："</span>);</span><br><span class="line">        test(list, (n) -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打印所有数：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> </span><br><span class="line">不打印：</span><br><span class="line">偶数：<span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>上面的实例中我们首先定义了一个函数式接口，提供一个返回boolean的方法，在一个普通的Java类中去使用这个接口，Lambda根据上下文得出参数类型，我们也可以自己定义一些代码逻辑去实现不同的功能。</p><p>Lambda在笔者经历的项目中，主要应用还是在Runable接口的使用中，其他方面并不是很多，而且，在有些团队中也不会允许使用Lambda表达式，有时候可能会影响代码可读性，但是Lambda作为Java8新特性，最起码要知道它的作用，读到相关的代码也不至于完全看不明白。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/lambdademo" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda表达式是Java8的新特性，它支持将代码块作为参数进行传递，这个特性我们之前是没有接触过的，在Java中定义的方法不可能完全独立，也不能将方法作为参数或者返回一个方法，Lambda可以做到这一点……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="Lambda" scheme="http://yoursite.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.7 抽象类、接口和内部类</title>
    <link href="http://yoursite.com/2018/12/18/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/07%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/12/18/JavaSE/Chapter5 面向对象/07、抽象类、接口和内部类/</id>
    <published>2018-12-18T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:45.625Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的例子中，我们编写的每一个类都定义了相关的方法，这些方法都有具体的方法体来描述这个类的某种行为。但是在某些特殊情况下，某个父类只是确定子类应该包含哪些方法，却不知道子类的具体实现，就引入的抽象类……</p><a id="more"></a><h2 id="7、抽象类、接口和内部类"><a href="#7、抽象类、接口和内部类" class="headerlink" title="7、抽象类、接口和内部类"></a>7、抽象类、接口和内部类</h2><p>在前面的例子中，我们编写的每一个类都定义了相关的方法，这些方法都有具体的方法体来描述这个类的某种行为。但是在某些特殊情况下，某个父类只是确定子类应该包含哪些方法，却不知道子类的具体实现，就引入的抽象类。举例来说，编写一个Shape类表示形状，这个类提供了计算面积和周长的两个方法，但是不同的子类例如圆、三角形、长方形的周长和面积的计算方式都不一样，要满足这样一个场景，就可以提供抽象方法，只有方法名，没有具体实现的方法。</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类就是用abstract关键字修饰的类，它是一种特殊的类，抽象方法同样也是用abstract修饰，看下实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算周长</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算面积</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">calArea</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">color</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打印颜色的普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义了一个Shape类，用abstract修饰，提供了构造器，并且提供了计算面积和周长的两个抽象方法，还有一个打印颜色的普通方法。抽象方法的定义中是不能包含{}的，就算没有方法体，下面定义一个类Circle继承Shape看一下用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> r;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> perimeter = <span class="number">2</span> * Math.PI * r;</span><br><span class="line">        System.out.println(<span class="string">"半径为"</span> + r + <span class="string">"的圆周长 = "</span> + perimeter);</span><br><span class="line">        <span class="keyword">return</span> perimeter;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> area = Math.PI * Math.pow(r, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"半径为"</span> + r + <span class="string">"的圆面积 = "</span> + area);</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">3</span>);</span><br><span class="line">        circle.calPerimeter();</span><br><span class="line">        circle.calArea();</span><br><span class="line"></span><br><span class="line">        Shape shape = <span class="keyword">new</span> Circle();</span><br><span class="line">        shape.color();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法后输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">半径为<span class="number">3.0</span>的圆周长 = <span class="number">18.84955592153876</span></span><br><span class="line">半径为<span class="number">3.0</span>的圆面积 = <span class="number">28.274333882308138</span></span><br><span class="line">构造方法</span><br><span class="line">打印颜色的普通方法</span><br></pre></td></tr></table></figure><p>Circle类很简单，定义了属性半径，并具体实现了Shape类中两个抽象方法，抽象类有自己的构造器但是不能用new去实例出一个对象，构造器主要用来被子类调用。一个抽象类有这样一些规则：</p><ul><li>抽象类中可以拥有抽象方法和普通方法；</li><li>有抽象方法的类一定是抽象类；</li><li>抽象类不能像普通类一样用new关键字去创建实例，只能当做父类被继承。</li><li>多态很灵活很好用。</li></ul><p>抽象类的用法总体来说是比较简单的，但是其中的思想可能会要在实践中才能体会，作为一个抽象类，在实际的项目中，应该是作为构架一级的存在，制定某些规则由子类去实现，就像一个公司的构架中，有老板，经理和员工，员工来执行事务，经理可以对事务进行管理，但是没必要具体去做，当然经理也有老板交代的事只能自己去完成，这里制定和管理事务就类似抽象方法、具体要做的事就是抽象类中的普通方法了，那么老板呢？假设一个老板主要是制定规则，所有的事都是手底下的人去完成，他不需要自己去做，那么，老板就是我们即将要拿出来的概念——接口。</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>不同于类定义，接口使用class，而是用interface关键字定义接口，但是接口的访问修饰符只有两种：public或者default（默认），接口名的定义遵循类名定义规则，接口名首字母大写，多个单词首字母都大写的驼峰式命名。从上面对抽象类的说明，我们知道接口也是一种规范，所以，接口中是不包含构造器和初始化块，一个接口中可以包含成员变量（只能是静态常量）、方法（抽象方法、类方法或默认方法）、内部类（内部接口、枚举）定义。</p><p>我们知道接口中定义的是多个类共同的行为规范，因此，接口中所有成员都应该是public访问权限。定义接口中的成员可以省略public，如果要指定，就只能是public访问控制修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWork</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span> <span class="params">(String food)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"午餐是："</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实例的接口中，定义了成员变量、普通方法和类方法，成员变量的定义必须要赋予初始值，否则编译错误，我们知道final的变量都是要赋予初始值的，在接口中定义成员变量，默认使用public static final 修饰的，不写的话系统默认提供。下面一个普通方法，本质就是abstract修饰的一个抽象方法，所以没有方法体。此外还有一个static修饰的类方法，此方法可用使用接口名直接调用。事实上，在实际的项目中，接口中我们一般会定义一些相关类共同使用的常量由接口直接调用，和一些普通方法供实现类重写，很少在接口中写一个具体的方法，这与我们的初衷有悖。</p><p>说到接口是用来定义规则的，那么定义了规则就要有具体的类去实现，接口不同于类的继承，接口的复用我们称为实现，使用implements关键字，而且接口是可以多实现的，也就是说一个普通的类可以同时实现多个接口，而类继承只能是单继承，一个类同一时间只能继承一个父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> <span class="keyword">extends</span> <span class="title">Boss</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestImpl</span> <span class="keyword">implements</span> <span class="title">Boss</span>, <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWork</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总得来说要注意的点是：</p><ul><li>类实现接口使用implements关键字，普通类继承父类、接口继承接口使用extends关键字；</li><li>implements后面可以跟多个接口用“，”分割，extends后面只能继承一个类；</li><li>接口没有构造方法，不能被实例化，主要用来定义通用规则，要灵活使用多态创建对象。</li><li>接口中定义的方法默认使用public修饰，成员变量默认使用public static final修饰。</li></ul><p>从这里我们也可以看出接口和抽象类最大的区别，当然接口的实际应用是很广的，后面还会大量用到。</p><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类，顾名思义就是定义在一个类内部的类，为什么要使用内部类呢？</p><ul><li>内部类在程序中实现了更深一层的封装，内部类可以访问外部类的私有数据，但是外部类不能访问内部类的实现细节；</li><li>内部类离开了当前外部类是没有任何意义的，只作用于当前类；</li></ul><p>看一下内部类的主要分类，从其中体会作用：</p><p><strong>非静态内部类：</strong></p><p>前面我们说过静态和非静态，也就是static修饰符的作用，非静态内部类就是在类内部定义的普通类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassA classA = <span class="keyword">new</span> ClassA();</span><br><span class="line">        classA.innerMethod(<span class="number">01</span>, <span class="string">"内部类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">innerMethod</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">            System.out.println(id + <span class="string">"_"</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InnerClass innerClass = <span class="keyword">new</span> InnerClass();</span><br><span class="line">        innerClass.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，内部类的使用方法和普通类其实是一样的，需要注意的是，我们有时候会见到一个java文件中有多个类，但是它们都是独立存在的，这中写法不能叫做内部类，只有定义在一个类的范围之内才是。</p><p>上面的实例中，我们在一个public类中定义了一个private修饰的类，内部类作为一个成员，自然可以使用public、private、protected和static修饰，外部类是不可以的。此外需要注意的一个细节是：一个普通的java文件中，有且只有一个public修饰的类，且这个类名要作为文件名存在，这个规则是正确的，但要注意和内部类的概念区分开。</p><p><strong>静态内部类</strong></p><p>所谓静态，自然就是static修饰，这样的类叫做静态内部类。既然是static修饰的，它就属于当前类本身，而不是当前外部类的某一个对象。不同于普通的非静态内部类，静态内部类中是可以包含静态成员也可以包含非静态成员的。我们知道静态成员是不能访问非静态成员的，所以静态内部类不能访问外部类的实例成员，只能访问外部类的静态成员。至于说到类的访问修饰符，参照前面<a href="3、封装.md">封装</a>中说到的细节，大同小异。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticInnerMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"静态内部类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">staticInnerMethodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// test(); //编译失败，静态内部类不能访问外部类普通方法</span></span><br><span class="line">        testForStatic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，接口中也可以定义内部类，且默认使用public static修饰，也就是说接口中定义的内部类只能是静态内部类。</p><p><strong>局部内部类</strong></p><p>这个局部内部类不同于前面说的两种类型，它是在方法中定义的内部类，因为这种内部类只作用于当前方法，所以局部内部类不能使用访问控制符和static修饰，实际开发中真没见过这种写法，此处略过。</p><p><strong>匿名内部类</strong></p><p>我们先以一个实例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneNameInnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">        product.getCount();</span><br><span class="line">        System.out.println(<span class="string">"普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NoneNameInnerClass innerClass = <span class="keyword">new</span> NoneNameInnerClass();</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        innerClass.test(<span class="keyword">new</span> Product() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"重写接口方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类的使用有规则制约;</p><ul><li>创建匿名内部类时会立即创建对象，所以匿名内部类不能使抽象类；</li><li>匿名内部类必须继承一个父类或者实现一个接口，但最多也只能实现一个接口；</li><li>匿名内部类不能定义构造器，但是可以定义初始化块。</li></ul><p>在实际开发中，内部类这一部分相对较少，其使用也是扩展自原有知识，写的不够清晰，后面用到再补回来。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/abstractclass" target="_blank" rel="noopener">本节代码路径_抽象类</a></p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/interfacedemo" target="_blank" rel="noopener">本节代码路径_接口</a></p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/innerclassdemo" target="_blank" rel="noopener">本节代码路径_内部类</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的例子中，我们编写的每一个类都定义了相关的方法，这些方法都有具体的方法体来描述这个类的某种行为。但是在某些特殊情况下，某个父类只是确定子类应该包含哪些方法，却不知道子类的具体实现，就引入的抽象类……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="抽象类" scheme="http://yoursite.com/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
      <category term="接口" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="内部类" scheme="http://yoursite.com/tags/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.6 static和final修饰符</title>
    <link href="http://yoursite.com/2018/12/17/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/06%E3%80%81static%E5%92%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2018/12/17/JavaSE/Chapter5 面向对象/06、static和final关键字/</id>
    <published>2018-12-17T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:41.417Z</updated>
    
    <content type="html"><![CDATA[<p>前面章节说到<a href="https://github.com/wmhou/java_blog/blob/master/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1%E3%80%81%E5%8F%98%E9%87%8F.md" target="_blank" rel="noopener">变量</a>的时候，曾说到过一个概念：类变量，我们说用static修饰的变量就是类变量，那么说到static，还有什么作用呢？我们详细看一下，在引入static之前先看一个新概念……</p><a id="more"></a><h2 id="6、static和final修饰符"><a href="#6、static和final修饰符" class="headerlink" title="6、static和final修饰符"></a>6、static和final修饰符</h2><h4 id="static修饰符："><a href="#static修饰符：" class="headerlink" title="static修饰符："></a>static修饰符：</h4><p>前面章节说到变量的时候，曾说到过一个概念：类变量，我们说用static修饰的变量就是类变量，那么说到static，还有什么作用呢？我们详细看一下，在引入static之前先看一个新概念：</p><p><strong>初始化块</strong></p><p>java中我们使用构造器来对某个对象进行初始化操作，类似于构造器的另一个概念是初始化块，它也可以对Java对象进行初始化操作，看一下下面的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"------第一个初始化块------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"------第二个初始化块------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---无参构造器---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------第一个初始化块------</span><br><span class="line">------第二个初始化块------</span><br><span class="line">---无参构造器---</span><br></pre></td></tr></table></figure><p>上面实例中，我们定义了一个类Person，并顺序创建了两个初始化块和一个无参构造器，初始化块的定义很简单，就是一对{…}，里面写上代码即可，main方法中我们只创建了一个Person对象，从运行结果可以看到，当创建一个对象的时候，JVM会先去执行类中定义的初始化块，如果定义了多个初始化块，则从上往下顺序执行。假如我们要创建多个对象，就会在每次创建对象前先去执行初始化块中的代码，改写一下main方法，我们再创建一个Person对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">------第一个初始化块------</span><br><span class="line">------第二个初始化块------</span><br><span class="line">---无参构造器---</span><br><span class="line">------第一个初始化块------</span><br><span class="line">------第二个初始化块------</span><br><span class="line">---无参构造器---</span><br></pre></td></tr></table></figure><p>说明：初始化块在每次创建对象之前都会先执行，每创建一个对象，顺序执行一次。</p><p>初始化块也是类中的成员，但我们也看到，它没有名字也没有标识，自然不能被类或者对象调用，它只会在程序运行时被JVM自动执行。那么疑问来了，既然都可以初始化代码，它和构造器的区别是什么呢？</p><p>从上面的实例看一下，初始化块是不能被调用且不能接受任何参数的，因此，不管有多少个重载的构造器，只要创建对象，都会先去执行初始化块，基于这个原因，我们可以把多个构造器中相同的、无须接收参数的代码提取到初始化块中定义，降低冗余。如果我们希望在类初始化的时候执行一些操作，而不是每次创建对象都去重复执行呢？此时就需要用static修饰块，称为静态初始化块。</p><p><strong>静态初始化块</strong></p><p>继续以上面的实例来说，在代码中加入两个static修饰的块，改变之后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wmhou.chapter5.statictest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description:初始化块演示</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;网站：&lt;a href="https://github.com/wmhou/java_blog"&gt;Java_blog on Github&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;Program Name: Java_blog</span></span><br><span class="line"><span class="comment"> * &lt;br/&gt;Date:2018-2-27</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 侯伟民</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"------第一个初始化块------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"------第二个初始化块------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"----第一个静态初始化块---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"----第二个静态初始化块---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---无参构造器---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">----第一个静态初始化块---</span><br><span class="line">----第二个静态初始化块---</span><br><span class="line">------第一个初始化块------</span><br><span class="line">------第二个初始化块------</span><br><span class="line">---无参构造器---</span><br><span class="line">------第一个初始化块------</span><br><span class="line">------第二个初始化块------</span><br><span class="line">---无参构造器---</span><br></pre></td></tr></table></figure><p>从输出结果来看，static块在程序运行时先被执行，有多个static修饰则顺序执行，且优先于初始化块执行。也就是说static块不依赖于对象的初始化而是依赖于类初始化，static块是类相关的，属于类的静态成员，通常用于对类变量执行初始化处理。神奇的static，到底是什么呢？</p><p>static，意为静态、全局，static可以用来修饰属性、方法和初始化块，当我们给一个属性或者方法加上static修饰符后，就可以在不创建一个对象的情况下直接用类去引用。</p><ul><li><p><strong>静态变量：</strong>tatic修饰的变量称作静态变量。静态变量和一般的成员变量不同，一个类在加载到内存时，静态变量只初始化一次，也就是说所有对象的静态变量在内存中都只有一个存储位置，每个对象中的静态变量都指向内存中同一个地址，它是在所有的对象之间共享的数据。</p></li><li><p><strong>静态方法：</strong>总体来说，static修饰后就是属于类，和任何对象无关，拿一个典型的例子，Java中的Math类来说，这个类作为一个数学工具类存在，定义了很多可以减少我们工作量的方法，如图</p><p><img src="image/math.png" alt=""></p><p>这只是小小一部分，试想一下假如这个类下面没有static修饰的方法，我们要使用任何一个方法都要先去new一个对象，如果要在不同方法中大量使用，是不是有点扯了，此时static就显现出作用了，不用创建对象，直接用类名调用，多好。可是偷懒的人们又发现了这样用会出现很多的Math.XXX()方法，是不是可以不用Math，static再次派上用场</p></li><li><p><strong>静态导包：</strong></p><p>这一种用法，把static方法加在了import之后，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br></pre></td></tr></table></figure><p>这样，就可以很愉快地去掉Math，直接使用Math类里面的方法了，不过，通常不建议这么玩；</p><p>此外，static方法中不能使用this和super？为什么呢，我们知道this和super代表当前类和父类的对象，但是我们的static可是全局的，虽然属于某个类，但实际上和当前类并没有直接关系，自然不能在这样的方法中直接访问某个类的变量和方法了。</p></li></ul><h4 id="final修饰符："><a href="#final修饰符：" class="headerlink" title="final修饰符："></a>final修饰符：</h4><p>final意为最终的意思。修饰符可以用来修饰类、方法和变量，统一来说，用final修饰的类、方法和变量都是不可改变的，详细看一下：</p><p><strong>final修饰类</strong></p><p>当一个类用final修饰的时候，它是不能够被继承的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalTest</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个final修饰的父类Super，用另一个类去extends Super类，会编译错误：</p><p><img src="image/final.png" alt=""></p><p>意思是不能继承final修饰的类，final修饰的类中每个方法都应该是final的。</p><p><strong>final修饰方法</strong></p><p>final修饰符修饰方法的时候，该方法不能被重写，基于上面的例子进行修改，在父类Super中加入一个final修饰的方法，在子类中重写会编译错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">finalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"final修饰的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final修饰成员变量</strong></p><p>final修饰的成员变量必须显式指定初始值，我们知道成员变量是随着类或对象的初始化而初始化的，所以不能先定义后赋值，看一下实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String id;<span class="comment">//这种写法，编译错误</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">"final"</span>;</span><br></pre></td></tr></table></figure><p><strong>final修饰局部变量</strong></p><ul><li><p>final修饰基本类型变量：此时需要对该final变量赋予初始值，且不能被重新赋值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFinal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> i;</span><br><span class="line">    i = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// i = 8; 在第一次被赋值之后，不能被重新赋值，否则编译错误；</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>final修饰引用类型变量：此时final只会保证该final变量引用的地址不会改变，也就是说一直引用同一个对象，但是这个对象本身完全可以发生改变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// arr = new int[]&#123;1, 3, 5, 7&#125;;不能被重新赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">7</span>;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>这个实例演示了，final修饰的引用数据类型，不能给赋值，但是可以改变对象内容的。</p></li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/statictest" target="_blank" rel="noopener">本节代码路径_static修饰符</a></p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/finaltest" target="_blank" rel="noopener">本节代码路径_final修饰符</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面章节说到&lt;a href=&quot;https://github.com/wmhou/java_blog/blob/master/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1%E3%80%81%E5%8F%98%E9%87%8F.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;变量&lt;/a&gt;的时候，曾说到过一个概念：类变量，我们说用static修饰的变量就是类变量，那么说到static，还有什么作用呢？我们详细看一下，在引入static之前先看一个新概念……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="static" scheme="http://yoursite.com/tags/static/"/>
    
      <category term="静态" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81/"/>
    
      <category term="final" scheme="http://yoursite.com/tags/final/"/>
    
      <category term="私有" scheme="http://yoursite.com/tags/%E7%A7%81%E6%9C%89/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.5 多态</title>
    <link href="http://yoursite.com/2018/12/16/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/05%E3%80%81%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2018/12/16/JavaSE/Chapter5 面向对象/05、多态/</id>
    <published>2018-12-16T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:36.318Z</updated>
    
    <content type="html"><![CDATA[<p>多态，面向对象语言的三大基本特征之一，多态是面向对象语言的重要特性之一，多态在Java中存在于继承之中，简单描述就是：父类引用指向子类对象。根据对多态的描述……</p><a id="more"></a><h2 id="5、多态"><a href="#5、多态" class="headerlink" title="5、多态"></a>5、多态</h2><p>多态是面向对象语言的重要特性之一，多态在Java中存在于继承之中，简单描述就是：父类引用指向子类对象。根据对多态的描述，我们写一个简单实例演示一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"姓名是："</span> + name + <span class="string">"；年龄是："</span> + age + <span class="string">"；性别是："</span> + gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"姓名是："</span> + name + <span class="string">"；年龄是："</span> + age + <span class="string">"；就是喜欢玩玩玩"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">int</span> age, String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, gender);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是子类重写的方法"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Hero(<span class="string">"孙大圣"</span>, <span class="number">5000</span>, <span class="string">"男"</span>);</span><br><span class="line">        System.out.println(p1.info());</span><br><span class="line">        p1.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是子类重写的方法</span><br><span class="line">姓名是：孙大圣；年龄是：<span class="number">5000</span>；就是喜欢玩玩玩</span><br></pre></td></tr></table></figure><p>首先我们看到，通常情况我们初始化一个类如Hero的时候，会使用Hero hero = new Hero()这样的方式，现在却使用了Person p = new Hero()的形式，让父类的引用去指向子类对象，同时我们在子类中重写了父类的info()方法，发现调用的时候执行了子类方法，如果没有重写，则会去调用父类中的方法。而如果定义一个Person类型的变量，让它指向一个new Person()的类型，此时只会执行父类中的方法。</p><p>在Java语言中，引用变量有两种类型：编译时类型和运行时类型，编译时类型由声明该变量时使用类型决定，运行时类型由实际赋给该变量的类型决定，在上面的实例中，变量p1的编译时类型为父类Person，运行时类型为子类Hero，由此可见，编译时类型和运行时类型的不一致，就可能出现多态现象。</p><p>总结一下，多态现象的必要条件：</p><ul><li>继承或者实现；</li><li>方法重写；</li><li>父类引用指向子类对象。</li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/multi" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多态，面向对象语言的三大基本特征之一，多态是面向对象语言的重要特性之一，多态在Java中存在于继承之中，简单描述就是：父类引用指向子类对象。根据对多态的描述……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="多态" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.4 继承</title>
    <link href="http://yoursite.com/2018/12/15/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/04%E3%80%81%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/12/15/JavaSE/Chapter5 面向对象/04、继承/</id>
    <published>2018-12-15T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:30.734Z</updated>
    
    <content type="html"><![CDATA[<p>继承，面向对象语言的三大基本特征之一，实现软件复用的重要操作，通过<strong>extends</strong>关键字实现，例如猫类继承动物类，苹果类继承水果类，实现继承的类叫做子类，被继承的类叫做父类或者基类……</p><a id="more"></a><h2 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h2><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承，面向对象语言的三大基本特征，实现软件复用的重要操作，通过<strong>extends</strong>关键字实现，例如猫类继承动物类，苹果类继承水果类，实现继承的类叫做子类，被继承的类叫做父类或者基类。举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Birds</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"color："</span>+ color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Birds</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ostrich ostrich = <span class="keyword">new</span> Ostrich();</span><br><span class="line">        ostrich.view(<span class="string">"黑色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例中我们先写了一个Birds作为父类，定义了一个属性color，一个view方法打印颜色，用一个Ostrich类继承Birds，Ostrich类就拥有了父类的方法，创建Ostrich对象就可以调用父类的方法，但是Ostrich对象并不能直接访问父类的私有属性，上面程序输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color：黑色</span><br></pre></td></tr></table></figure><p>可是，为什么要用继承呢？这样的方法自己写了不是更好？</p><p>在上面的实例中，鸟类涵盖范围太大了，从麻雀到老鹰，从候鸟到留鸟，大部分的鸟类都会飞，但是飞的行为却不一样，所有的鸟类都要吃东西，但是有的食草有的食肉，还有各种各样的颜色。如果每一种鸟都去定义这样的方法，势必对出现大量重复的代码，所以才将共性的部分提取出来作为父类，事实上很多的继承并不是一开始就这么制定了，而是在优化的过程中不断抽取重复代码才出现的。</p><p>继承主要有以下特性：</p><ul><li>子类拥有父类非private的方法和属性；</li><li>子类可以拥有自己独立的方法和属性，也就是子类的可扩展性；</li><li>子类可以重写父类的方法；</li><li>java中的继承是单继承，也就是说一个父类可以有多个子类，但是一个子类只能继承于一个父类，如果我们要实现多重继承，就可以构造多个类，类A继承类B，类B继承类C。</li></ul><h4 id="方法重写："><a href="#方法重写：" class="headerlink" title="方法重写："></a>方法重写：</h4><p>上面的例子中，鸵鸟类集成了鸟类，有了显示颜色的方法，鸟类会飞翔，但是鸵鸟并不会飞翔，所以鸵鸟要去重写飞翔的方法实现自己的逻辑，修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Birds</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">view</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"color："</span>+ color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鸟儿会飞。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Birds</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鸵鸟会跑不会飞。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ostrich ostrich = <span class="keyword">new</span> Ostrich();</span><br><span class="line">        ostrich.view(<span class="string">"黑色"</span>);</span><br><span class="line">        ostrich.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，如果子类没有重写fly方法，那么Ostrich的对象调用fly方法就会打印：鸟儿会飞，显然是不合逻辑的，而重写了这个方法之后，再去调用fly方法就是自己的实现了，打印出：鸵鸟会跑不会飞。一般我们会在重写的方法上一行写上@override标签来表示这是一个重写的方法，需要注意重写和重载的不同之处。</p><h4 id="super关键字和构造方法调用："><a href="#super关键字和构造方法调用：" class="headerlink" title="super关键字和构造方法调用："></a>super关键字和构造方法调用：</h4><p>super关键字和this关键字很相似，不过super指向的是父类的对象，this指向的是当前类的对象，同样的super也不能出现在static修饰的方法中，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.view(<span class="string">"鸵鸟颜色白加黑"</span>);</span><br><span class="line">        System.out.println(<span class="string">"鸵鸟会跑不会飞。。。"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在fly方法中使用super调用的是父类的方法，super表示父类的对象。这里使用的super实际上是调用了父类无参的构造器，而且在默认情况下也是调用父类无参的构造器。但如果我们想用super去调用父类声明的有参构造方法呢？</p><p>重新写一个实例，我们知道构造方法是用来初始化一个对象的，来看一下子类是怎么执行父类的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类无参的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String id, String name, String department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.department = department;</span><br><span class="line">        System.out.println(<span class="string">"父类有参的构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> reward;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(<span class="keyword">double</span> reward)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reward = reward;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String id, String name, String department, <span class="keyword">double</span> reward)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(id, name, department);</span><br><span class="line">        <span class="keyword">this</span>.reward = reward;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Manager managerA = <span class="keyword">new</span> Manager();</span><br><span class="line">        Manager managerB = <span class="keyword">new</span> Manager(<span class="number">20000</span>);</span><br><span class="line">        Manager managerC = <span class="keyword">new</span> Manager(<span class="string">"0002"</span>, <span class="string">"赵子龙"</span>, <span class="string">"集成工具部"</span>, <span class="number">30000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下这两个类，父类是雇员类，子类是经理类，这里同样也可以再说明一下什么时候使用继承，我们在处理两个对象时，如果有“is-a”的关系，就可以使用继承，比如上面的实例中，经理作为公司管理人员，在项目结束时会拿到奖金，而普通员工并没有，但同时经理也隶属于公司，同样作为雇员存在，所以可以用继承减少相同代码，去进行自己功能的扩展，同样作为雇员，人事、行政、技术、销售等各个岗位都会有自己的特性，各个岗位又有共性，此时就可以用继承来实现。</p><p>继续说到构造方法，上面的实例中，运行main()方法会输出如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父类无参的构造方法</span><br><span class="line">父类无参的构造方法</span><br><span class="line">父类有参的构造方法</span><br></pre></td></tr></table></figure><p>我们对子类构造了三个不同的对象，分别使用子类无参、有参构造器和super调用父类构造器，可以看到，不管是否使用super关键字，每一个对象的创建都会先去调用父类中的构造方法一次，总结一下：</p><ul><li>如果子类构造器既没有super也没有this，则默认执行子类构造器前先执行父类无参构造器；</li><li>如果子类构造器使用this调用子类另一个重载的构造器，系统会根据传入的实参去掉用对应的构造器，执行该构造器之前又会先去调用父类无参构造器；</li><li>如果子类构造器第一行使用super调用父类构造器，系统会根据实参调用对应的父类构造器。</li></ul><p>需要注意的是：this和super对构造器的调用都在代码第一行，所以它们不能同时出现。 </p><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><p>在前面的例子中，我们构造的普通java类中有重写toString、hashCode和equals方法，然而我们并没有使用extends关键字去集成任何一个类，那么怎么会有这些重写的方法呢？原因很简单，Java中定义了一个Object类，这个类是所有类的超类，也就是说每一个类都是由它扩展而来，默认每一个类都继承这个类，但是并不需要显式指定。结合前面构造方法的调用，我们初始化一个子类会先去调用父类的构造方法，Object类就是最顶层的父类。既然是作为最顶级的父类，那就一定提供了一些所有类通用的方法，下面看几个常用的方法：</p><ul><li><p><strong>equals()方法：</strong>用来判断两个对象的内容是否相同，还记得前面说<a href="https://github.com/wmhou/java_blog/blob/master/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/3%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6.md" target="_blank" rel="noopener">比较运算符</a>说到的==吗，==在引用数据类型中比较的是对象的引用。先看一段代码，再讨论一下这二者之间的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EqualTest</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EqualTest e1 = <span class="keyword">new</span> EqualTest(<span class="number">1</span>);</span><br><span class="line">        EqualTest e2 = <span class="keyword">new</span> EqualTest(<span class="number">1</span>);</span><br><span class="line">        System.out.println(e1.equals(e2));</span><br><span class="line">        System.out.println(e1 == e2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个实例的输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>很奇怪是不是，对于”==”运算符比较两个EqualsTest对象返回false，我们明白这点，因为e1和e2分别指向不同的对象，所以二者内存地址是不相同的。但是equals()方法呢？我们前面说比较的是内容，也就是说上例中拥有相同id的情况下我们认为两个对象是相等的，却返回了false。原因就是我们使用equals方法的时候没有去重写，所以此时调用的是Object类的equals()方法，这个原始方法内部的实现其实就是”==”，，看一下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，为了达到我们的期望值，就要重写equals()方法，让对象之间的比较按照我们需要的逻辑去比较内容，而不是内存地址，重写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> EqualTest) &#123;</span><br><span class="line">        EqualTest test = (EqualTest) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id == test.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行，我们发现输出的结果就满足我们的预期了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>上面重写的方法中用到了instanceof关键字，它可以用来判断某对象所指向的类型，判断返回boolean值，在上面的例子中传入的对象是EqualsTest类型，然后去比较id，也就是内容，返回比较的结果。</p></li><li><p><strong>hashCode()方法：</strong></p><p>一般要求在重写equals()方法的同时也重写hashCode()方法，该方法返回一个对象的哈希值，后面再说。</p></li><li><p><strong>toString()方法：</strong></p><p>该方法主要用来返回当前对象的字符串表达式，继续在上面的例子中重写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"EqualTest&#123;"</span> + <span class="string">"id="</span> + id + <span class="string">"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印该对象输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EqualTest&#123;id=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>如果不去重写toString()方法，那么打印对象会输出如下结果（类名+@+hashCode）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.wmhou.chapter5.extendstest.EqualTest@<span class="number">1540e19</span>d</span><br></pre></td></tr></table></figure></li><li><p><strong>线程同步相关方法：</strong></p><p>wait()、notify()、notifyAll()方法，这几个方法在后面章节线程中会详细说明。</p></li><li><p><strong>getClass()方法：</strong></p><p>该方法会返回一个对象的类对象，关于这个方法会在后面章节反射机制中说明。​</p></li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/extendstest" target="_blank" rel="noopener">本节代码路径</a></p><p><a href="05、多态.md">下篇——Chapter5：05、多态</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承，面向对象语言的三大基本特征之一，实现软件复用的重要操作，通过&lt;strong&gt;extends&lt;/strong&gt;关键字实现，例如猫类继承动物类，苹果类继承水果类，实现继承的类叫做子类，被继承的类叫做父类或者基类……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.3 封装</title>
    <link href="http://yoursite.com/2018/12/14/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/03%E3%80%81%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2018/12/14/JavaSE/Chapter5 面向对象/03、封装/</id>
    <published>2018-12-14T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:26.927Z</updated>
    
    <content type="html"><![CDATA[<p>封装是面向对象语言的三大特征之一，另外还有继承和多态，封装是指：将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法操作和访问类内部信息……</p><a id="more"></a><h2 id="3、封装"><a href="#3、封装" class="headerlink" title="3、封装"></a>3、封装</h2><h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><p>封装是面向对象语言的三大特征之一，另外还有继承和多态，封装是指：将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法操作和访问类内部信息。为什么要使用封装呢？因为我们经常会使用对象访问某个成员变量，如果第一次访问时给了值，第二次访问时又可能去改变属性的值，这样在语法上是不会有问题的，但是有悖于现实，所以使用封装，隐藏细节，而提供了方法访问。</p><p>具体实现封装就要用到访问控制符来实现。</p><h4 id="访问控制符："><a href="#访问控制符：" class="headerlink" title="访问控制符："></a>访问控制符：</h4><p>Java中提供了四种访问控制权限，分别用private、default、protected和public表示，这四个访问控制符权限由小到大：</p><ul><li>private：修饰属性、构造方法和方法，权限是当前类；</li><li>default：修饰属性、构造方法和方法，权限是同包内，可以不加任何访问控制符默认default修饰；</li><li>protected：修饰属性、构造方法和方法，权限是子类，如果使用protected修饰，通常是希望子类重写该方法；</li><li>public：修饰类、属性、构造方法和方法，最高权限，不论是否在同一个包内。</li></ul><p>下面实例我们创建两个类，AccessControl类中定义了两个private的属性，定义了public的getter和setter方法，在AccessControlTest类中创建对象，访问某个属性，我们发现private的属性，在不同类中是没法直接访问的，只能访问public的方法，这样就隐藏了类的细节，实现了封装。由此看来，Java类中实例变量的getter和setter方法就有了很重要的意义，在当前类之外，只能通过getter和setter方法操作属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControlTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AccessControl control = <span class="keyword">new</span> AccessControl();</span><br><span class="line">        control.setName(<span class="string">"name测试"</span>);</span><br><span class="line">        String name = control.getName();</span><br><span class="line">        System.out.println(<span class="string">"name："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name：name测试</span><br></pre></td></tr></table></figure><p>说到这里，还要说一下Java中程序涉及的原则：高内聚、低耦合。</p><ul><li>高内聚：尽可能把模块内部数据、实现细节等隐藏，不允许外部程序直接干预；</li><li>低耦合：暴露少量的方法给外部使用。</li></ul><p>关于访问控制符，有这样一些原则：</p><ul><li>类中大部分成员变量都应该是private修饰，除非是一些static修饰的变量才有可能用public修饰，类内部使用的方法也使用private修饰；</li><li>如果某个类主要作为父类，希望子类重写方法而不是给外部使用，应该用protected修饰；</li><li>给外部其他类使用的方法由public修饰，所以一般用public修饰构造方法，除非是单例模式，设计模式后面会说。</li></ul><h4 id="package和import："><a href="#package和import：" class="headerlink" title="package和import："></a>package和import：</h4><p>前面多次说到包这个概念，那么什么是包呢？</p><p>先看一下我们这个项目结构              <img src="image/package.png" alt=""></p><p>src源码目录下，创建了com.wmhou包，在这个包下面又创建了多个chapter来存放不同章节的代码示例，我们把具有类似功能的多个类放在一个包下，包的概念在windows目录结构中其实就是一层层文件夹。实际开发中我们包名定义一般遵循Oracle公司的写法，域名+公司+项目（+子模块）的形式，一般来说我们会在一个类的首行写明这个类所属的包，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wmhou.chapter5.accesscontrol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessControl</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么当前类的类名其实就是：com.huawei.chapter4.AccessControl，如果我们需要在其他的包内引用这个类，就要使用import关键字引包，假如说我们要使用chapter4这个包下的ArrayTest这个类，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wmhou.chapter4.ArrayTest;</span><br></pre></td></tr></table></figure><p>import写在一个类的package和class之间，如果有javadoc注释的话，写在注释后面，类名之前，当然，如果不用import的话就要写上类的全名，当然，一般不这么写，这么写的情况是，不同两个包内有两个相同的类名，而且参数相同，要使用这两个类的时候，某一个类就要加上全名才能区分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.wmhou.chapter4.ArrayTest test = <span class="keyword">new</span> com.wmhou.chapter4.ArrayTest();</span><br></pre></td></tr></table></figure><h4 id="Java中常用的包："><a href="#Java中常用的包：" class="headerlink" title="Java中常用的包："></a>Java中常用的包：</h4><p>Java按照不同功能提供了很多种开发人员常用的包，许多常用类就在这些包下，这些类也就是前面说过的API（应用程序接口），列举一些上用的包：</p><ul><li>java.lang：核心类，包含了String、System等常用类，这个包不需要import引入，可以直接使用；</li><li>java.util：这个包包含一些常用工具类，例如Arrays等；</li><li>java.net：提供网络编程相关接口和类，如Socket等；</li><li>java.io：提供输入输出相关操作的接口和类，如ImputStream等；</li><li>java.sql：提供JDBC数据库编程相关的接口和类。</li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5/accesscontrol" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;封装是面向对象语言的三大特征之一，另外还有继承和多态，封装是指：将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法操作和访问类内部信息……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="封装" scheme="http://yoursite.com/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.2 方法</title>
    <link href="http://yoursite.com/2018/12/13/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/02%E3%80%81%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/13/JavaSE/Chapter5 面向对象/02、方法/</id>
    <published>2018-12-13T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:23.013Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的内容中我们一直有用到过方法，比如main()方法、输出打印的out()方法，那么到底什么是方法呢？在Java中，方法的定义是：包含于类或对象中的用于执行某种特定功能的代码……</p><a id="more"></a><h2 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h2><p>在前面的内容中我们一直有用到过方法，比如main()方法、输出打印的out()方法，那么到底什么是方法呢？</p><p>在Java中，方法的定义是：包含于类或对象中的用于执行某种特定功能的代码，方法不能独立定义，只能在类中，由类或者所属类的对象调用执行。我们之前说过static修饰的方法可以用类名直接调用，当然也可以用这个类的对象调用，如果参数相同还是可以得到相同的执行结果，如果没有static修饰，就只能由对象调用。</p><h4 id="命名规则："><a href="#命名规则：" class="headerlink" title="命名规则："></a>命名规则：</h4><p>方法的命名不同于类，一般我们使用首字母小写后面单词以大写字母开头的形式，例如：addStudent；</p><h4 id="方法定义和重载："><a href="#方法定义和重载：" class="headerlink" title="方法定义和重载："></a>方法定义和重载：</h4><p>前面我们已经定义过方法，知道一个方法的基本组成是：访问修饰符（可选）、返回值类型、方法名、形参和方法体这些基本元素构成，那么如何使用呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性：id</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//属性：name</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodTest</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法1：没有形参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"没有形参的方法：id = "</span> + id + <span class="string">"; name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法2：有形参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有形参的方法：id = "</span> + id + <span class="string">"; name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法3：形参为引用类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(MethodTest test)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"形参为对象的方法：id = "</span> + test.id + <span class="string">"; name = "</span> + test.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法4：有返回值方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有返回值的方法：name = "</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SUCCESS"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主方法，程序入口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MethodTest test1 = <span class="keyword">new</span> MethodTest(<span class="number">2</span>, <span class="string">"方法2"</span>);</span><br><span class="line">        test1.exec();</span><br><span class="line"></span><br><span class="line">        MethodTest test2 = <span class="keyword">new</span> MethodTest();</span><br><span class="line">        test2.exec(<span class="number">1</span>, <span class="string">"方法1"</span>);</span><br><span class="line"></span><br><span class="line">        test1.exec(test1);</span><br><span class="line">        test1.exec(test2);</span><br><span class="line">        test2.exec(test1);</span><br><span class="line">        test2.exec(test2);</span><br><span class="line"></span><br><span class="line">        String str1 = test1.exec(<span class="string">"方法4"</span>);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line"></span><br><span class="line">        String str2 = test2.exec(<span class="string">"方法4"</span>);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下这个实例：</p><ul><li>定义了id和name两个属性；</li><li>定义了有参和无参两个构造方法，构造方法名称和类名相同，叫做构造方法重载；</li><li>定义了4个方法，方法名都是exec，分别为没有形参、有形参、形参为引用数据类型和一个有返回值的方法，这里叫做方法重载，对于重载方法而言，也就是在同一个类中，方法名相同，形参列表不同（类型、数量、顺序不同）的多个方法,，通过传入对应的参数执行对应的方法；</li><li>定义了main()方法，也就是主方法、程序入口，创建了两个对象，去调用方法，执行得到如下结果：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">没有形参的方法：id = <span class="number">2</span>; name = 方法</span><br><span class="line">有形参的方法：id = <span class="number">1</span>; name = 方法</span><br><span class="line">形参为对象的方法：id = <span class="number">2</span>; name = 方法</span><br><span class="line">形参为对象的方法：id = <span class="number">0</span>; name = <span class="keyword">null</span></span><br><span class="line">形参为对象的方法：id = <span class="number">2</span>; name = 方法</span><br><span class="line">形参为对象的方法：id = <span class="number">0</span>; name = <span class="keyword">null</span></span><br><span class="line">有返回值的方法：name = 方法</span><br><span class="line">SUCCESS</span><br><span class="line">有返回值的方法：name = 方法</span><br><span class="line">SUCCESS</span><br></pre></td></tr></table></figure><h4 id="参数传递："><a href="#参数传递：" class="headerlink" title="参数传递："></a>参数传递：</h4><p>上面的实例中我们看到，方法是不能独立存在的，必须要在类中定义，如果要调用方法则需要类或者对象调用，如果方法包含了形参，那么调用这个方法的时候就需要给对应的形参传入指定参数值，这个参数值也被叫做实参。在Java中，参数传递只有一种：值传递。也就是说在参数传递的时候，实际传入的是实参的副本，不管方法内对传入的参数如何操作，都不会改变参数本身。</p><p>上面的代码中，方法内的形参有基本数据类型和引用数据类型，说明方法的参数传递，不仅可以传入基本数据类型，也可以传入引用数据类型，基本数据类型我们之前说过，这一类型的定义和值都是存储在栈区，而引用数据类型的值是存储在堆内存中，通过引用使用，类似与结构化编程语言中的指针，通过上面的例子看一下需要注意的地方：</p><ul><li>使用方法必要要有类或者对象调用；</li><li>根据调用方法指定的形参列表传入具体的参数值来使用重载方法；</li><li>无返回值的方法直接使用，有返回值的方法需要指定对应返回值类型的变量接收返回参数</li><li>重点看一下类类型传递，不管使用哪个对象调用方法，都需要传入实参才能使用方法，如果没有具体值，就会使用类型本身的默认值，引用类型默认值为null。</li></ul><h4 id="形参个数可变的方法："><a href="#形参个数可变的方法：" class="headerlink" title="形参个数可变的方法："></a>形参个数可变的方法：</h4><p>Java中还有一个功能，就是允许定义形参个数可变的参数，使用时可以接收多个参数值，看一下这个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> id, String... name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有返回值的方法：id = "</span> + id + <span class="string">" name = "</span> + Arrays.toString(name));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MethodTest test2 = <span class="keyword">new</span> MethodTest();</span><br><span class="line">      test2.exec(<span class="number">3</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"参数1"</span>, <span class="string">"参数2"</span>, <span class="string">"参数3"</span>&#125;);</span><br><span class="line">      test2.exec(<span class="number">3</span>, <span class="string">"参数1"</span>, <span class="string">"参数2"</span>, <span class="string">"参数3"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有返回值的方法：id = <span class="number">3</span> name = [参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p> 形参个数可变方法，形参定义的时候在参数类型和变量名之间加…，使用的时候可以传入多个该类型的参数，实际上参数是以数组的形式存在，需要注意的是：</p><ul><li>数组形式的参数可以位于形参列表内任意位置，个数可变的参数只能位于列表最后；</li><li>一个方法中有且只有一个个数可变的形参。</li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前面的内容中我们一直有用到过方法，比如main()方法、输出打印的out()方法，那么到底什么是方法呢？在Java中，方法的定义是：包含于类或对象中的用于执行某种特定功能的代码……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="方法" scheme="http://yoursite.com/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Chapter5.1 类和对象</title>
    <link href="http://yoursite.com/2018/12/12/JavaSE/Chapter5%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/01%E3%80%81%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/12/12/JavaSE/Chapter5 面向对象/01、类和对象/</id>
    <published>2018-12-12T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:19.527Z</updated>
    
    <content type="html"><![CDATA[<p>在Chapter1.1、Java语言概述中大概介绍过Java作为面向对象语言的一些基本特征，现在详细说一下这两个重要概念：类（class）和对象（object）……</p><a id="more"></a><h2 id="1、类和对象"><a href="#1、类和对象" class="headerlink" title="1、类和对象"></a>1、类和对象</h2><p>在Chapter1.1、Java语言概述中大概介绍过Java作为面向对象语言的一些基本特征，现在详细说一下这两个重要概念：类（class）和对象（object）：</p><h4 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h4><p>类，是Java语言中最基本的单位，类可以作为某一批对象的抽象，大了说有人类、鸟类、电脑类、编程语言类，他们都会有各自独有的属性去描述这一类事物，比如说人类可以有姓名、年龄、籍贯等更多更细致的属性，因为这些属性的不同，可以具象出一个个独立的对象，而这些属性中，或许有一部分可以拿来描述别的类，但是有些属性却是某些类所不具备的，比如描述人类的血型属性，我们不会拿来描述一只鸟或者一台电脑，同样电脑这个类的CPU、内存等属性也不会用来描述一个人或者人类，这样就有了一个个不同的类。</p><p>对于一个类而言，在Java中通常包含三种最常见的成员：成员变量、构造器和方法：</p><ul><li>成员变量：也就是这个类需要的属性，Java中有一个很重要的概念叫抽象，也就是说我们在定义一个类的时候，不需要列举出所有的属性，而且也很难做到，我们只需要关注我们需要的属性就可以；</li><li>构造器：创建一个对象的根本途径，我们可以通过不同的构造器创建不同的对象，没有构造器是不能创建对象的，Java中提供了一种默认无参数的构造器，即使不显式写出也可以用来创建对象；</li><li>方法：也就是行为，我们可以为一个类定义不同的方法去做不同的事。</li></ul><p>看一下我们应该如何定义一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性：学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> studentId;</span><br><span class="line">    <span class="comment">//属性：姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//属性：年龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//属性：籍贯</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//属性：专业</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="comment">//属性：爱好</span></span><br><span class="line">    <span class="keyword">private</span> String hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> studentId, String name, String subject)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentId = studentId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> studentId, String name, String subject)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学号："</span> + studentId + <span class="string">"；姓名："</span> + name + <span class="string">"专业："</span> + subject + <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实例中我们定义了一个students的类，用来描述学生，学生有学号、姓名等属性，然后定义了一个有参构造器和一个无参构造器来创建对象，最后定义了一个学习的方法来描述学生行为，看一下语法：</p><ul><li>类：访问修饰符 + class + 类名{}，类名首字母大写，多个单词组成每个首字母大写；</li><li>属性：数据类型 + 变量名；</li><li>构造器：访问修饰符 + 类名（参数1，…，参数n）{}</li><li>方法：访问修饰符 + 返回值 + 方法名（参数，…，参数n）{}</li><li>如果没有创建任何构造器，也可以通过new关键字创建一个默认对象，如果创建了有参构造器还要使用无参构造器创建对象，就一定要显式写出无参构造器。</li></ul><h4 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h4><p>定义了类之后，我们就可以使用对象了，前面说过，创建一个对象需要构造器，Java中使用new关键字 + 构造器的形式来创建一个对象（实例）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line">    Students studentA = <span class="keyword">new</span> Students();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line">    Students studentB = <span class="keyword">new</span> Students(<span class="number">199108</span>, <span class="string">"Da_师兄"</span>,<span class="string">"软件工程"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个引用多个对象</span></span><br><span class="line">    studentA = studentB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个引用一个对象：studentC和studentD都指向同一个对象</span></span><br><span class="line">    Students studentC = studentA;</span><br><span class="line">    Students studentD = studentA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实例中我们分别使用无参和有参构造器创建了两个对象，然后用两个Students类型的变量去引用这两个对象，这样studentA和studentB就代表了两个不同的对象，不同于之前说过的基本数据类型，这里的对象属于引用数据类型，在内存中的存储是堆栈存储的，引用是存储在栈内存中，而具体的对象是存储在堆内存中。</p><p>假如说有多个引用要使用一个对象的时候，不会去复制这些对象，之需要引用这一个实际对象即可，以免造成资源浪费，而如果是一个引用多个对象的话，第一个对象就没有被引用了，换句话说，一个引用同一时间只能指向一个对象。</p><h4 id="this引用"><a href="#this引用" class="headerlink" title="this引用"></a>this引用</h4><p>在Java中，this关键字代表当前类的对象，</p><p>上面的例子中，在构造器中我们使用的this访问属性，下面看一下访问别的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> studentId, String name, String hobbies)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.study(studentId, name, hobbies);</span><br><span class="line">    System.out.println(<span class="string">"学号："</span> + studentId + <span class="string">"；姓名："</span> + name + <span class="string">"专业："</span> + hobbies + <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个片段中，如果某个对象要使用play方法时，会先调用study方法，再执行打印，当然如果省略了this的话也可以执行，这个this依旧是存在的。需要注意的是，在static修饰的方法中是不能使用this的，因为static修饰的方法可以用类直接调用，如果方法内再用了this，这时候this就不能指向合适的对象，在静态方法中使用this会引起编译错误。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter5" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Chapter1.1、Java语言概述中大概介绍过Java作为面向对象语言的一些基本特征，现在详细说一下这两个重要概念：类（class）和对象（object）……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter5 面向对象" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="类" scheme="http://yoursite.com/tags/%E7%B1%BB/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Chapter4.1 数组</title>
    <link href="http://yoursite.com/2018/12/11/JavaSE/Chapter4%20%E6%95%B0%E7%BB%84/1%E3%80%81%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/12/11/JavaSE/Chapter4 数组/1、数组/</id>
    <published>2018-12-11T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:15.380Z</updated>
    
    <content type="html"><![CDATA[<p>数组在Java中是一种常见的数据结构，用于存放相同类型的数据，并可以根据索引取出对应的元素的值……</p><a id="more"></a><h2 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h2><p>数组在Java中是一种常见的数据结构，用于存放相同类型的数据，并可以根据索引取出对应的元素的值，首先看一下如何定义一个数组：</p><h4 id="定义数组："><a href="#定义数组：" class="headerlink" title="定义数组："></a>定义数组：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1;</span><br><span class="line"><span class="keyword">int</span> arr2[]; <span class="comment">//不推荐使用这种定义方式</span></span><br></pre></td></tr></table></figure><p>定义一个数组有上述两种方式，不过通常都是用第一种方式，可读性更好。</p><h4 id="数组初始化："><a href="#数组初始化：" class="headerlink" title="数组初始化："></a>数组初始化：</h4><p>数组必须进行初始化才可以使用，数组的初始化分为静态初始化和动态初始化两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[] intArr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">String[] strArr = &#123;<span class="string">"java"</span>, <span class="string">"数组"</span>&#125;;  </span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span>[] intArr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">intArr2[<span class="number">0</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>静态初始化是在初始化数组时显式指定初始值，由系统决定长度；</li><li>动态初始化是在初始化数组时只指定数组长度，然后再为数组指定初始值；</li><li>不能同时使用两种初始化，即不能既指定数组长度又分配初始值；</li><li>数组的长度是不可变的，一旦分配好内存空间，就不能再变化。</li></ul><h4 id="数组使用："><a href="#数组使用：" class="headerlink" title="数组使用："></a>数组使用：</h4><p>数组最常使用就是访问数组元素，数组每一个元素对应一个索引，索引值是从0开始，数组最后一个元素的索引等于数组的长度减1，如果使用数组时指定的索引值小于0或者大于数组长度，就会引发运行异常：数组下标越界。看一下这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] intArr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"数组intArr1"</span> + <span class="string">"的长度是："</span> + intArr1.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intArr1.length; i++)&#123;</span><br><span class="line">     System.out.println(<span class="string">"索引为："</span>+ i + <span class="string">"的元素的值是："</span> + intArr1[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组intArr1的长度是：<span class="number">5</span></span><br><span class="line">索引为：<span class="number">0</span>的元素的值是：<span class="number">1</span></span><br><span class="line">索引为：<span class="number">1</span>的元素的值是：<span class="number">3</span></span><br><span class="line">索引为：<span class="number">2</span>的元素的值是：<span class="number">5</span></span><br><span class="line">索引为：<span class="number">3</span>的元素的值是：<span class="number">7</span></span><br><span class="line">索引为：<span class="number">4</span>的元素的值是：<span class="number">9</span></span><br></pre></td></tr></table></figure><p>上面实例使用for循环取出了数组intArr1的所有元素，可以看到，数组的长度是5，索引最大值是4，每一个索引都对应数组中一个元素，如果使用foreach取出这个数组中的元素，写法就更简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> arr: intArr1)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"数组intArr1的元素的值是："</span> + arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>使用循环为数组赋值：</strong></p><p>使用动态初始化之后，如果我们需要为数组赋值，可以根据索引逐个赋值，也可以使用for循环，看一下这个实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态初始化  </span></span><br><span class="line">String[] str = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"><span class="comment">//循环赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    str[i] = <span class="string">"我是数组"</span> + i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="keyword">for</span> (String str1: str)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"数组str的元素的值是："</span> + str1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组str的元素的值是：我是数组<span class="number">0</span></span><br><span class="line">数组str的元素的值是：我是数组<span class="number">1</span></span><br><span class="line">数组str的元素的值是：我是数组<span class="number">2</span></span><br><span class="line">数组str的元素的值是：我是数组<span class="number">3</span></span><br><span class="line">数组str的元素的值是：我是数组<span class="number">4</span></span><br></pre></td></tr></table></figure><p>需要注意的是：如果使用循环为数组赋值，我们不采用foreach，因为使用foreach只是将值赋予临时变量，并没有改变数组中实际存在的值，使用foreach赋值很容易引起错误，而且没有什么实际意义。</p><p><strong>数组查找：</strong></p><p>假设我们需要在一个很大的数组内找出其中的最大值，我们应该怎么做呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">72</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">66</span>, <span class="number">43</span>, <span class="number">66</span>, <span class="number">25</span>, <span class="number">21</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">70</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找最大值并打印</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组arr的最大值是："</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面程序得到结果，最大值是72，原理很简单，设置一个变量，可以是数组中任意一个元素，然后用数组中每一个元素和它比较，如果数组中元素大于这个值，就把大的值赋给它，如果小于，则进行下一次循环，直到遍历完整个数组，查找最小值也是如此。</p><p><strong>数组排序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：3 6 9 21 23 25 43 66 66 66 68 70 72 </p><p>常见的排序还有选择排序、插入排序，归并等，不再一一列举。</p><h4 id="增强工具类Arrays："><a href="#增强工具类Arrays：" class="headerlink" title="增强工具类Arrays："></a>增强工具类Arrays：</h4><p>Arrays是针对数组的一个工具，包含了一系列static修饰的方法，也就是类方法，可以用类名直接访问，进行查找、排序和复制等操作，可以提高开发效率，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义数组1</span></span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">//定义数组2</span></span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">6</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"数组是否相等："</span> + Arrays.equals(arr1,arr2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Arrays.binarySearch前需要对数组排序，否则结果会不准确</span></span><br><span class="line">    System.out.println(<span class="string">"排序后：查看对应元素的索引："</span> + Arrays.binarySearch(arr1, <span class="number">7</span>));</span><br><span class="line">    System.out.println(<span class="string">"排序前：查看对应元素的索引："</span> + Arrays.binarySearch(arr2, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义数组3进行复制操作</span></span><br><span class="line">    <span class="keyword">int</span>[] arr3 = Arrays.copyOfRange(arr1, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    System.out.println(<span class="string">"转化为字符串："</span> + Arrays.toString(arr3));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    Arrays.sort(arr2);</span><br><span class="line">    System.out.println(<span class="string">"数组arr2排序之后："</span> + Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//填充</span></span><br><span class="line">    Arrays.fill(arr3, <span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">"数组arr2排序之后："</span> + Arrays.toString(arr3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组是否相等：<span class="keyword">false</span></span><br><span class="line">排序后：查看对应元素的索引：<span class="number">3</span></span><br><span class="line">排序前：查看对应元素的索引：-<span class="number">1</span></span><br><span class="line">转化为字符串：[<span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">数组arr2排序之后：[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">数组arr2排序之后：[<span class="number">9</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>Arrays还有很多用法，可以参考API使用。</p><h4 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h4><p>顾名思义，二维数组就是在一个数组中存储了多个数组的结构，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] a: arr)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;, &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>[] a: arr1)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>对比普通数组来说，普通数组是在数组中存储单个的值，而二维数组是将多个数组按照索引存放在一个数组中，在内存分配上，多维数组在内存中相当于分配了一个矩阵的存储空间。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter4" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组在Java中是一种常见的数据结构，用于存放相同类型的数据，并可以根据索引取出对应的元素的值……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter4 数组" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter4-%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Chapter3.3 循环结构</title>
    <link href="http://yoursite.com/2018/12/10/JavaSE/Chapter3%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/3%E3%80%81%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/12/10/JavaSE/Chapter3 流程控制/3、循环结构/</id>
    <published>2018-12-10T14:00:00.000Z</published>
    <updated>2018-12-22T15:29:29.328Z</updated>
    
    <content type="html"><![CDATA[<p>循环结构是实际项目中经常用到的流程控制结构，主要用来控制在满足循环条件的情况下反复执行某一段代码，这一段代码叫做循环体……</p><a id="more"></a><h2 id="3、循环结构"><a href="#3、循环结构" class="headerlink" title="3、循环结构"></a>3、循环结构</h2><p>循环结构是实际项目中经常用到的流程控制结构，主要用来控制在满足循环条件的情况下反复执行某一段代码，这一段代码叫做循环体，常用的循环结构有以下几种：</p><ol><li>for循环；</li><li>增强for循环：foreach；</li><li>while循环；</li><li>do…while循环；</li></ol><h4 id="for循环："><a href="#for循环：" class="headerlink" title="for循环："></a>for循环：</h4><p>先来一个最简单的示例感受一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"这是第"</span> + i + <span class="string">"次循环"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是第<span class="number">0</span>次循环</span><br><span class="line">这是第<span class="number">1</span>次循环</span><br><span class="line">这是第<span class="number">2</span>次循环</span><br><span class="line">这是第<span class="number">3</span>次循环</span><br><span class="line">这是第<span class="number">4</span>次循环</span><br></pre></td></tr></table></figure><p>看上去很复杂，其实并没有，先看一下for循环的语法：</p><ul><li>int i = 0，为for循环赋予初始值；</li><li>i &lt; 5，循环条件；</li><li>i++，自增，给变量i赋值；</li><li>{循环体，如果只有一行可以省略大括号，一般不这么做}</li><li>for循环表达式中的分号是不能缺少的</li></ul><p>分析一下输出结果：</p><ul><li>首先对变量i的值进行判断，发现满足条件&lt;5，直接执行循环体；</li><li>执行完循环体，进行i++运算，再次判断变量值，此时，i = 1满足条件&lt;5，执行循环体；</li><li>以上循环执行到i=5的时候，不满足循环，退出循环；</li><li>综上，我们可以看到for循环的执行顺序：初始化——判断条件——执行循环体——计算——判断条件，初始化的代码在循环中只执行一次。</li></ul><p>升级一下复杂度，正好复习一下++的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"这是第"</span> + i++ + <span class="string">"次循环"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>分析一下代码：</p><ul><li>首先，i = 0，判断 i &lt;= 5，执行循环体打印，并进行 i++ 运算 ，执行打印：0；</li><li>对变量再次运算时，此时变量值已经是1，i++，判断时变量值2&lt;=5满足条件，执行打印：2；</li><li>对变量再次运算时，此时变量值已经是3，i++，判断时变量值4&lt;=5满足条件，执行打印：4；</li><li>再次运算时，此时变量值已经是3，i++，判断时变量值6&lt;=5不满足条件，退出循环。</li></ul><p>实际输出的结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是第<span class="number">0</span>次循环</span><br><span class="line">这是第<span class="number">2</span>次循环</span><br><span class="line">这是第<span class="number">4</span>次循环</span><br></pre></td></tr></table></figure><h4 id="foreach——增强for循环："><a href="#foreach——增强for循环：" class="headerlink" title="foreach——增强for循环："></a>foreach——增强for循环：</h4><p>foreach是java5的新特性之一，在遍历数组、集合方面给开发者提供了很大的便利，下面的实例我们从一个最简单的数组说明一下foreach的语法结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ints = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">//for (类型 变量： 遍历对象)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i: ints)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：1，3，5，7，9；</p><p>如果用改用for循环来写的话，就是这个样子，关于数组，后面还会进行深入分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(ints[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环："><a href="#while循环：" class="headerlink" title="while循环："></a>while循环：</h4><p>while循环的语法很简单，继续用一个实例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"这是第"</span> + i + <span class="string">"次循环"</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是第<span class="number">0</span>次循环</span><br><span class="line">这是第<span class="number">1</span>次循环</span><br><span class="line">这是第<span class="number">2</span>次循环</span><br><span class="line">这是第<span class="number">3</span>次循环</span><br><span class="line">这是第<span class="number">4</span>次循环</span><br></pre></td></tr></table></figure><p>需要注意的是：while循环一定要有保证循环条件变成false的时候，否则将会成为死循环，上例中如果没有i++控制，就会不停打印耗尽电脑性能。</p><h4 id="do…while-循环："><a href="#do…while-循环：" class="headerlink" title="do…while()循环："></a>do…while()循环：</h4><p>do while循环与while循环的区别在于：while循环是先判断条件，如果满足条件再执行循环体，而do while循环则是先执行循环体再去判断循环条件，如果满足条件则再次循环，不满足则中止，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"这是第"</span> + j + <span class="string">"次循环"</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(j &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>这段程序执行结果和while循环执行结果完全一致，可以看出，在do while循环中，无论是否满足条件，都至少会执行1次循环体，而while循环只要不满足则一次都不执行。</p><h4 id="嵌套循环："><a href="#嵌套循环：" class="headerlink" title="嵌套循环："></a>嵌套循环：</h4><p>升级难度了，上面我们执行的都是单个循环，但是在实际项目中嵌套循环也常会用到，上述4种循环都可以自由嵌套，先看一个实例，分析一下嵌套循环中代码的执行顺序；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//外层循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//内层循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"i的值为："</span> + i + <span class="string">"；j的值为："</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下：</p><ul><li>首先执行外层循环，满足条件，进入循环体，执行内层循环，满足条件得到：i = 0， j = 0；</li><li>内层结束，计算变量j，判断&lt;3满足条件，继续执行打印：i = 0， j = 1；</li><li>再次计算，变量j = 2，满足条件&lt;3，打印结果：i = 0， j = 2；</li><li>再次计算，变量j = 3，不满足条件结束循环进如外层，此时，对变量i进行计算得到，判断i = 1 &lt; 2满足条件，执行循环体，重新执行内层循环，打印结果：i = 1，j = 0；</li><li>此时重复上述步骤，直到内层循环不满足条件退出，此时外层循环判断后也不满足条件，退出全部循环。</li></ul><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i的值为：<span class="number">0</span>；j的值为：<span class="number">0</span></span><br><span class="line">i的值为：<span class="number">0</span>；j的值为：<span class="number">1</span></span><br><span class="line">i的值为：<span class="number">0</span>；j的值为：<span class="number">2</span></span><br><span class="line">i的值为：<span class="number">1</span>；j的值为：<span class="number">0</span></span><br><span class="line">i的值为：<span class="number">1</span>；j的值为：<span class="number">1</span></span><br><span class="line">i的值为：<span class="number">1</span>；j的值为：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>由此可见，当发生嵌套循环时，如果满足外层循环条件则执行内层，此时内层循环体需要反复执行直到结束再进入外层循环，只有当外层循环不满足条件时才能真正退出嵌套循环，这样我们就可以得到嵌套循环执行总次数：如果外层执行m次，内层执行n次，那么总共会执行m*n次。</p><h4 id="循环控制："><a href="#循环控制：" class="headerlink" title="循环控制："></a>循环控制：</h4><p>说了这么多循环，怎么更好更主动地控制循环呢？比如说我们有一个循环，要在满足某一个条件时进行某个操作，此时我们就可以用到循环控制了，java中主要使用的循环控制有break、continue和return关键字</p><p><strong>break</strong></p><p>break用于完全结束一个循环，跳出循环体，拿上面嵌套循环举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"i的值为："</span> + i + <span class="string">"；j的值为："</span> + j);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先执行外层循环，满足条件进入循环体，执行内层循环，进入内层循环体，打印i = 0， j = 0，执行break退出内层循环进入外层，再次执行，打印i = 1， j = 0，退出内层，此时外层循环也不满足，退出全部循环；</p><p><strong>continue</strong></p><p>不同于break，continue用于结束本次循环,，不再执行后面代码，再开始下一次循环，而不是完全结束一个循环，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"这是第"</span> + i + <span class="string">"次循环！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是第<span class="number">0</span>次循环！</span><br><span class="line">这是第<span class="number">2</span>次循环！</span><br></pre></td></tr></table></figure><p>可以看出，当变量值为1的时候，结束了当前循环，所以没有打印值为1的循环，如果是break的话，则在满足条件的时候会完全退出循环。</p><p><strong>return</strong></p><p>return不止用于循环中，单独使用return可以结束一个方法，比如在嵌套循环中遇到了return，不过有多少层嵌套都会完全退出所有的循环，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"i的值为："</span> + i + <span class="string">"；j的值为："</span> + j);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面实例，只会输出i = 0， j = 0的结果，因为在执行完第一次打印之后碰到了return，便直接结束了所有的循环，在方法中关于return的使用还会说明。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter3" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环结构是实际项目中经常用到的流程控制结构，主要用来控制在满足循环条件的情况下反复执行某一段代码，这一段代码叫做循环体……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter3 流程控制" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter3-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="循环结构" scheme="http://yoursite.com/tags/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Chapter3.2 分支控制</title>
    <link href="http://yoursite.com/2018/12/09/JavaSE/Chapter3%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2%E3%80%81%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/12/09/JavaSE/Chapter3 流程控制/2、分支结构/</id>
    <published>2018-12-09T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:06.248Z</updated>
    
    <content type="html"><![CDATA[<p>Java流程控制之分支结构——if、switch……</p><a id="more"></a><h2 id="2、分支结构"><a href="#2、分支结构" class="headerlink" title="2、分支结构"></a>2、分支结构</h2><h4 id="if分支语句"><a href="#if分支语句" class="headerlink" title="if分支语句"></a>if分支语句</h4><p>if条件语句有以下三种形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if结构</span></span><br><span class="line"><span class="keyword">int</span> score1 = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">if</span> (score1 &gt;= <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score1 + <span class="string">"分，恭喜你，及格了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if...else...结构</span></span><br><span class="line"><span class="keyword">int</span> score2 = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">if</span> (score2 &gt;= <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score2 + <span class="string">"分，恭喜你，及格了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score2 + <span class="string">"分，没及格啊骚年..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if...else if...else...结构</span></span><br><span class="line"><span class="keyword">int</span> score3 = <span class="number">76</span>;</span><br><span class="line"><span class="keyword">if</span> (score3 &lt; <span class="number">60</span>) </span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score3 + <span class="string">"分，没及格啊骚年..."</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score3 &gt;= <span class="number">60</span> &amp;&amp; score3 &lt; <span class="number">80</span>) </span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score3 + <span class="string">"分，刚好及格、成绩一般般..."</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score3 + <span class="string">"分，很好很强大..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分支结构在Java语言中占有很重的分量，使用分支结构可以控制代码执行顺序：</p><ul><li><p>if结构：如果if后面的表达式为true则执行后面的代码，false则不执行，如果if结构中只有一样代码可以省略大括号，不过为了代码可读性一般不推荐；</p></li><li><p>if…else…结构：用自然语言翻译就是如果……否则……，如果满足if条件则执行if分支中代码，否则执行else分支中代码；</p></li><li><p>if…else if…else…结构：此结构中else if可以有多层，比如以上实例用自然语言描述应该是以下这样：</p><p>如果分数小于60分，则不及格，反之大于60分可以分为60-80分之间合格，80以上优秀，以此类推就会有多种情况。注意：这种结构中可能发生一种很容易出现的逻辑错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑错误演示：</span></span><br><span class="line"><span class="keyword">int</span> score4 = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">if</span> (score4 &gt; <span class="number">60</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score4 + <span class="string">"分，刚好及格、成绩一般般..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score4 &gt; <span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score4 + <span class="string">"分，很好很强大..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score4 &gt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">"成绩："</span> + score4 + <span class="string">"分，很明显这是一个bug..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看上例代码，运行发现并没有报错，却只输出了if分支内的语句：“成绩：110分，刚好及格、成绩一般般…”，后面的条件同样满足，却没有输出，而实际上我们希望看到的应该是最后一个else…if分支中的语句，因为，else含义就是否则，它本身就是一个条件，也就是说它要对if条件取反，再去执行取反后的条件和语句。</p></li></ul><h4 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h4><p>switch分支结构的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String season = <span class="string">"大冷天"</span>;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"春天"</span>:</span><br><span class="line">                System.out.println(<span class="string">"春回大地"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"夏天"</span>:</span><br><span class="line">                System.out.println(<span class="string">"骄阳似火"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"秋天"</span>:</span><br><span class="line">                System.out.println(<span class="string">"秋高气爽"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"冬天"</span>:</span><br><span class="line">                System.out.println(<span class="string">"冰天雪地"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"这不是一个季节嘛~~~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们先看看执行效果：如果我们给变量season赋值为春天，就会执行打印：春回大地，同样的，给变量赋予其他的季节，也就是case标签后的值，就会执行对应的操作，如果赋值不是任何一个case后的值，则会执行default后的语句块。需要注意的是：</p><ol><li>switch后面表达式的类型只能是：byte，char、short、int四种证书类型或者枚举和String类型，不能和if一样使用boolean类型；</li><li>case标签之后会紧跟代码块，case作为代码块的唯一标识；</li><li>每一个case块后都有一条break;语句作为控制，如果注释掉某个break并不会发生编译错误，但是代码会顺序往下执行直到碰到下一个break；</li></ol><p>switch的用法比较好掌握，且在笔者所经历的项目中并没有太多的应用，这一部分权当备忘，万一用到再回头查看。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter3" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java流程控制之分支结构——if、switch……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter3 流程控制" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter3-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="分支结构" scheme="http://yoursite.com/tags/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Chapter3.1 流程控制</title>
    <link href="http://yoursite.com/2018/12/08/JavaSE/Chapter3%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/1%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2018/12/08/JavaSE/Chapter3 流程控制/1、流程控制/</id>
    <published>2018-12-08T14:00:00.000Z</published>
    <updated>2018-12-22T15:28:02.499Z</updated>
    
    <content type="html"><![CDATA[<p>ava编程语言中提供了三种流程控制结构：分别是顺序结构、分支结构和循环结构……</p><a id="more"></a><h2 id="1、流程控制"><a href="#1、流程控制" class="headerlink" title="1、流程控制"></a>1、流程控制</h2><p>Java编程语言中提供了三种流程控制结构：分别是顺序结构、分支结构和循环结构：</p><ul><li>顺序结构：程序自上而下逐行执行，排在前面的代码先执行，后面的代码后执行；</li><li>分支结构：根据条件选择性执行某段代码，使用if…else…或switch结构；</li><li>循环结构：根据循环条件重复执行某段代码，使用for、while和foreach循环结构。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ava编程语言中提供了三种流程控制结构：分别是顺序结构、分支结构和循环结构……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter3 流程控制" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter3-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="流程控制" scheme="http://yoursite.com/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Chapter2.3 运算符</title>
    <link href="http://yoursite.com/2018/12/07/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/3%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2018/12/07/JavaSE/Chapter2 变量和数据类型/3、运算符/</id>
    <published>2018-12-07T14:00:00.000Z</published>
    <updated>2018-12-22T15:27:58.175Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说项目上主要使用直接赋值、算数、逻辑和比较运算符这几类，运算并赋值在笔者所在团队是不可使用的，因为可读性相对差，位运算的话在笔者经历的项目中也是比较少用的……</p><a id="more"></a><h2 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h2><p>Java语言中运算符分为以下几种：</p><p><img src="image/calc.png" alt=""></p><p>一般来说项目上主要使用直接赋值、算数、逻辑和比较运算符这几类，运算并赋值在笔者所在团队是不可使用的，因为可读性相对差，位运算的话在笔者经历的项目中也是比较少用的，知道大概的意思就可以，细节可以在用到的时候再查询。</p><p>####算数运算符：+、-、*、/、%、++、–</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">6.4</span>;</span><br><span class="line">        <span class="keyword">int</span> d2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> d3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"d1 + d2 = "</span> + (d1 + d2));</span><br><span class="line">        System.out.println(<span class="string">"d1 - d2 = "</span> + (d1 - d2));</span><br><span class="line">        System.out.println(<span class="string">"d1 * d2 = "</span> + (d1 * d2));</span><br><span class="line">        System.out.println(<span class="string">"d1 / d2 = "</span> + (d1 / d2));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"d1 / d3 = "</span> + (d1 / d3)); <span class="comment">//结果输出：d1 / d3 = Infinity</span></span><br><span class="line">        <span class="comment">// System.out.println("d2 / d3 = " + (d2 / d3)); //结果异常</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"d1 % d2 = "</span> + (d1 % d2));</span><br><span class="line">        <span class="comment">// System.out.println("d2 % d3 = " + (d2 % d3)); //结果异常</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出的结果是：</p><p><img src="image/calcTest.png" alt=""></p><p>上面实例中实现了自动类型转换后的算数运算，值得注意的是除法运算和取余运算：</p><ul><li>在除法运算，如果两个操作数都是整数，输出结果也是整数且除数不能为0，否则输出异常，如果有一个浮点数或者两个浮点数，除数为0时输出结果为：无穷大。</li><li>取余运算中，取到的余数不一定是整数，取余也是要用到除法运算，所以遵循除法运算的规则，不过在有一个浮点数或者两个浮点数的运算中，如果第二个操作数是0，那么输出结果是非数：NaN。</li></ul><p>++、–和前置后置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    System.out.println(i++);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line">    System.out.println(++j);</span><br><span class="line">    System.out.println(j);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">    System.out.println(a++ + <span class="number">3</span> + a-- + ++a - <span class="number">1</span>); <span class="comment">//4 + 3 + 5 + 5 - 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果分别为：5、6、7、7、16；</p><ul><li>后置：当++或者–后置时，先对操作数取值，再进行运算；</li><li>前置：当++或者–前置时，先进行运算，再取运算后的操作数的值；</li><li>–自减：用法和++基本一致，不过是操作数减1；</li><li>上面实例最后一个输出解析：a++ +3，先进性运算得到7，此时a=5，7+5得到12，此时a = 4，然后12 + ++a计算时，先运算++a，此时a=5，12+5=17，再减1得到结果16；</li></ul><h4 id="赋值运算："><a href="#赋值运算：" class="headerlink" title="赋值运算：="></a>赋值运算：=</h4><p>赋值运算符用于为变量赋值，除了前面的例子中看到的直接赋值，还可以将变量或者表达式赋值给另一个变量，参看本节图1，此处不再叙述。</p><h4 id="逻辑运算符和比较运算符："><a href="#逻辑运算符和比较运算符：" class="headerlink" title="逻辑运算符和比较运算符："></a>逻辑运算符和比较运算符：</h4><ul><li><p>&amp;&amp;和&amp;：与的运算，前者短路，后者不短路，也就是说，使用前后两个表达式运算时同时为true则返回true，有一个false则返回false，但是&amp;&amp;判断如果第一个表达式返回false，则不进行后面表达式运算，直接返回false，&amp;要判断所有的表达式，使用&amp;&amp;效率更高；</p></li><li><p>||和|：或的运算，前后表达式只要有一个true，则整体返回true，否则返回false，同样的，||运算只要判断有一个表达式返回true则结束运算直接返回true，|要对所有表达式运算才会返回，||效率更高；</p></li><li><p>！：非，操作数取反；</p></li><li><p>^：异或，两个操作数不同则返回true，否则返回false；</p></li><li><p>实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;         </span><br><span class="line">System.out.println(<span class="number">6</span> &gt; <span class="number">4</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">5</span>); <span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">6</span> &gt; <span class="number">4</span> &amp; <span class="number">3</span> &gt;= <span class="number">5</span>); <span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">6</span> &gt; <span class="number">4</span> || <span class="number">3</span> &gt; <span class="number">5</span>); <span class="comment">//true</span></span><br><span class="line">    System.out.println(<span class="number">6</span> &gt; <span class="number">4</span> | <span class="number">3</span> &gt; <span class="number">5</span>); <span class="comment">//true</span></span><br><span class="line">    System.out.println(!(<span class="number">6</span> &gt; <span class="number">4</span>)); <span class="comment">//false</span></span><br><span class="line">    System.out.println(<span class="number">6</span> &gt; <span class="number">4</span> ^ <span class="number">5</span> &gt; <span class="number">3</span>);  <span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="number">4</span> == <span class="number">5</span>);  <span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="三元运算符："><a href="#三元运算符：" class="headerlink" title="三元运算符："></a>三元运算符：</h4><p>三元运算符也叫三目运算符，用法很简单，实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span> &gt;=<span class="number">3</span> ? <span class="string">"你是对的"</span>:<span class="string">"你又错了"</span>);</span><br></pre></td></tr></table></figure><p>结果输出：你是对的，解析一下，先对前面的逻辑表达式运算得到true的结果，则返回第一个操作数的值，如果表达式是false，则返回第二个操作数的值</p><h4 id="位运算符："><a href="#位运算符：" class="headerlink" title="位运算符："></a>位运算符：</h4><p>位操作都是基于二进制来说的，我们平时使用都是十进制，二进制的基本法则是逢二进一，我们有一个方法可以把十进制整数转换为二进制字符串，也可以用Integer.parseInt()方法实现二进制到十进制的转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出：10的二进制表达式是：1010</span></span><br><span class="line">System.out.println(<span class="string">"10的二进制表达式是："</span> + Integer.toBinaryString(<span class="number">10</span>));</span><br><span class="line"><span class="comment">//输出：1010的十进制表达式是：1010</span></span><br><span class="line">System.out.println(<span class="string">"1010的十进制表达式是："</span> + Integer.parseInt(<span class="string">"1010"</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>输出结果是1010和10，基于以上方法我们看一下位运算：</p><ul><li><p>按位或|：对每一位进行或运算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line">System.out.println(m + <span class="string">"的二进制表达式是："</span> + Integer.toBinaryString(m)); <span class="comment">//输出110</span></span><br><span class="line">System.out.println(n + <span class="string">"的二进制表达式是："</span> + Integer.toBinaryString(n)); <span class="comment">//输出111</span></span><br><span class="line">System.out.println(m | n); <span class="comment">//输出结果为7，或运算后得到二进制111，转换十进制得到7</span></span><br></pre></td></tr></table></figure></li><li><p>按位与&amp;：对每一位进行与运算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(m | n); <span class="comment">//输出结果为6，与运算后得到二进制110，转换十进制得到6</span></span><br></pre></td></tr></table></figure></li><li><p>异或^：</p><p>任何数和自己异或都是0；</p><p>任何数和0异或都等于自己；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(m ^ n); <span class="comment">//输出结果为1，或运算后得到二进制001，转换十进制得到1</span></span><br><span class="line">System.out.println(<span class="string">"和自己异或："</span> + (m ^ m)); <span class="comment">//输出0</span></span><br><span class="line">System.out.println(<span class="string">"和0异或："</span> + (m ^ <span class="number">0</span>));  <span class="comment">//输出本身</span></span><br></pre></td></tr></table></figure></li><li><p>按位非~：</p><p>m=6，6的二进制是：00000110，取非得到：11111001，换算成二进制得到：-7，这一部分运算涉及到二进制原码，反码和补码，可以再深入了解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(~m); <span class="comment">//输出-7</span></span><br></pre></td></tr></table></figure></li><li><p>左移和右移&lt;&lt;、&gt;&gt;：</p><p>左移：根据一个数的二进制，将每一位向左移动，最右一位补0；</p><p>右移：根据一个数的二进制，将每一位向右移动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6的二进制是110</span></span><br><span class="line">System.out.println(Integer.toBinaryString(m));</span><br><span class="line"><span class="comment">//6向左移1位后，变成1100，对应的十进制是12</span></span><br><span class="line">System.out.println(m&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="comment">//6向右移1位后，变成11，对应的十进制是3</span></span><br><span class="line">System.out.println(m&gt;&gt;<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter2" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般来说项目上主要使用直接赋值、算数、逻辑和比较运算符这几类，运算并赋值在笔者所在团队是不可使用的，因为可读性相对差，位运算的话在笔者经历的项目中也是比较少用的……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter2 变量和数据类型" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="运算符" scheme="http://yoursite.com/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Chapter2.2 基本数据类型</title>
    <link href="http://yoursite.com/2018/12/06/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/12/06/JavaSE/Chapter2 变量和数据类型/2、基本数据类型/</id>
    <published>2018-12-06T14:00:00.000Z</published>
    <updated>2018-12-22T15:27:52.909Z</updated>
    
    <content type="html"><![CDATA[<p>Java的基本数据类型可以划分为四类八种……</p><a id="more"></a><h2 id="2、基本数据类型"><a href="#2、基本数据类型" class="headerlink" title="2、基本数据类型"></a>2、基本数据类型</h2><h4 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h4><p>Java的基本数据类型可以划分为四类八种，如下：</p><p><img src="image/val.png" alt=""></p><ul><li><p><strong>整形：</strong></p><p>用于存放整数，赋值超出范围会产生编译错误，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">400</span>;</span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b + <span class="string">"\n"</span> +<span class="string">"s = "</span> + s + <span class="string">"\n"</span> + <span class="string">"i = "</span> + i + <span class="string">"\n"</span> + <span class="string">"l = "</span> + l); </span><br><span class="line">      <span class="comment">//超出范围，产生编译错误</span></span><br><span class="line">        <span class="comment">//byte b1 = 300;   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码输出结果为：<img src="image/data.png" alt=""></p><p>如果给byte型赋值300，则会产生编译错误，说明每一个数据类型的取值都是有范围的。</p></li><li><p><strong>字符类型：</strong></p><p>char型用于存入一个字符，用单引号表示，超过一个字符就会产生编译错误，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;        </span><br><span class="line"><span class="comment">//字符型</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">'AB'</span>; <span class="comment">//编译错误</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">'字'</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">'字符'</span>;<span class="comment">//编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>浮点型：</strong></p><p>Java浮点数有两种，double代表双精度64位，float代表单精度32位，Java语言的浮点类型默认double类型，如果希望把一个浮点数当成float类型处理，要加F或f，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">3.14F</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>布尔型：</strong></p><p>布尔型只有一种boolean类型，用于表示逻辑上的”真”或”假”，对应true / false，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>boolean主要用于做为旗标进行流程控制，一般使用场景有：</p><ul><li>if条件语句；</li><li>while循环控制语句；</li><li>do while循环控制语句；</li><li>for循环控制语句</li><li>三目运算符等</li></ul></li></ul><h4 id="二、基本类型之类型转换："><a href="#二、基本类型之类型转换：" class="headerlink" title="二、基本类型之类型转换："></a>二、基本类型之类型转换：</h4><ul><li><p><strong>1、基本类型转换</strong></p><p>Java8种基本类型之间，除去boolean之外的7种，大部分相互之间可以转换，又分为两种转换方式：自动类型转换和强制类型转换。</p><ul><li><p>自动类型转换：</p><p>如本节图一所示，当把一个取值范围小的数值或变量直接赋值给另一个取值范围大的变量时，就会发生强制类型转换；反之则需要强制类型转换，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataChangeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> i = b;</span><br><span class="line">        System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1000L</span>;</span><br><span class="line">        <span class="keyword">float</span> f1 = l;</span><br><span class="line">        System.out.println(<span class="string">"f1 = "</span> + f1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">3.14F</span>;</span><br><span class="line">        <span class="keyword">double</span> d = f;</span><br><span class="line">        System.out.println(<span class="string">"d = "</span> + d);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = c;</span><br><span class="line">        System.out.println(<span class="string">"i1 = "</span> + i1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">65</span>;</span><br><span class="line">        <span class="comment">//byte类型不能自动转换为char类型</span></span><br><span class="line">        <span class="comment">//char c1 = b1;</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">char</span> c1 = <span class="string">'B'</span>;</span><br><span class="line">        <span class="comment">//以下代码将编译报错，char型不能自动转换为byte型</span></span><br><span class="line">        <span class="comment">//byte b2 = c1;</span></span><br><span class="line">        <span class="comment">//short s = c1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动类型转换图：</p><p><img src="image/dataChange.png" alt=""></p></li></ul></li><li><p><strong>2、强制类型转换</strong></p><p>如果我们需要反向转换，也就是将上图箭头右边的类型转换为左边的类型，就需要强制类型转换了，转换的语法是：（转换类型）值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i2 = <span class="number">130</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b2);</span><br></pre></td></tr></table></figure><p>上面这个实例输出的结果是：-126；想象一下有一大一小两个瓶子，如果大瓶子水不多将其倒入小瓶子的话还好，如果水很多，就会发生溢出现象，从而造成数据损失，上例就是典型的溢出。</p></li><li><p><strong>3、表达式类型的自动提升</strong></p><p>当一个表达式中包含多种基本数据类型的时候，表达式中的数据类型将会自动提升到与表达式中最高等级操作数相同的类型，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i3 = <span class="number">100</span>;</span><br><span class="line">i3 = i3 + s;</span><br><span class="line">System.out.println(<span class="string">"i3 = "</span> + i3);</span><br></pre></td></tr></table></figure><p>输出结果为：110，表达式中自动将short提升为int型，进行了加法运算；</p><p>注意：+ 的存在如果是在基本数据类型的话就是加法运算符，如果是有字符串和基本数据类型存在，则可能作为字符串连接符，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello"</span> + <span class="string">'A'</span> + <span class="number">3</span>);</span><br><span class="line">      System.out.println(<span class="number">7</span> + <span class="string">'A'</span> + <span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>上面例子分别输出：helloA3和72hello，为什么会这样呢？</p><p>第一个表达式先进行字符串连接将A转换为字符串拼接，接着对helloA+3运算，将3转换为字符串，得到：helloA3；</p><p>第二个表达式先进行7+A运算，将A提升为int型，转换成A对应的ASCII值：65，相加得到72，与字符串hello运算将72提升为字符串，然后进行连接，得到结果：72hello；</p></li></ul><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter2" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的基本数据类型可以划分为四类八种……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter2 变量和数据类型" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="数据类型" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Chapter2.1 变量</title>
    <link href="http://yoursite.com/2018/12/05/JavaSE/Chapter2%20%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1%E3%80%81%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2018/12/05/JavaSE/Chapter2 变量和数据类型/1、变量/</id>
    <published>2018-12-05T14:00:00.000Z</published>
    <updated>2018-12-22T15:27:48.884Z</updated>
    
    <content type="html"><![CDATA[<p>Java变量和命名规范，变量的定义：命名一个数据的标示符……</p><a id="more"></a><h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><p><strong>变量的定义：</strong>命名一个数据的标示符，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ul><li>int：数据类型，表示一个整数；</li><li>number：变量，标示符；</li><li>=：赋值操作符；</li><li>100：数据类型的值；</li></ul><p><strong>变量分类：</strong></p><ul><li><p>全局变量：也叫实例变量，独立于方法之外的变量，一个类中有且只有一个相同的变量名</p></li><li><p>局部变量：类方法中定义的变量，可以在多个方法中定义相同变量名；</p></li><li><p>类变量：独立于方法之外，用static修饰的变量，可以用类名直接调用，一个类中有且只有一个变量名</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>变量定义规范：</strong></p><p>变量命名遵循的原则是：单个单词全部小写，多个单词组成的话，第一个单词首字母小写，其余单词首字母大写。最重要的一点是，所有变量命名一定有其意义，尽量避免无意义命名。</p><p><a href="https://github.com/wmhou/java_blog/tree/master/JavaSE/JavaCode/src/com/wmhou/chapter2" target="_blank" rel="noopener">本节代码路径</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java变量和命名规范，变量的定义：命名一个数据的标示符……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter2 变量和数据类型" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter2-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="变量" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Chapter1.3 第一个Java程序</title>
    <link href="http://yoursite.com/2018/12/04/JavaSE/Chapter1%20%E6%A6%82%E8%BF%B0/3%E3%80%81%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/12/04/JavaSE/Chapter1 概述/3、第一个Java程序/</id>
    <published>2018-12-04T14:00:00.000Z</published>
    <updated>2018-12-26T15:01:23.171Z</updated>
    
    <content type="html"><![CDATA[<p>开发第一个Java程序：HelloWorld……</p><a id="more"></a><h2 id="3、第一个Java程序"><a href="#3、第一个Java程序" class="headerlink" title="3、第一个Java程序"></a>3、第一个Java程序</h2><h4 id="编辑Java源代码"><a href="#编辑Java源代码" class="headerlink" title="编辑Java源代码"></a>编辑Java源代码</h4><p>在任意文件夹下新建一个文本文件，并在文件中输入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面文本文件保存为HelloWorld.java（扩展名从.txt变为.java），此文件就是Java程序源文件。</p><h4 id="编译Java程序"><a href="#编译Java程序" class="headerlink" title="编译Java程序"></a>编译Java程序</h4><p>在HelloWorld.java文件所在文件夹下打开CMD，我所知道的有这样几种方法：</p><ol><li><p>Win+R快捷键：输入：CMD打开，输入：D:切换到D盘，输入：cd /代码路径/找到指定文件夹，用过Linux都知道Windows的命令行用起来多纠结；</p></li><li><p>直接找到源码位置，在地址栏输入：cmd然后Enter打开，如图；</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/91965646.jpg" alt=""></p></li><li><p>找到源码位置，按住shift右击鼠标，找到cmd打开；</p></li></ol><p>在cmd窗口输入：javac HelloWorld.java编译源码，生成一个HelloWorld.class字节码文件，如图：</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/89797908.jpg" alt=""></p><h4 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h4><p>继续在cmd输入：java HelloWorld，界面输出：HelloWorld则运行成功，如图：</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/36489136.jpg" alt=""></p><p>如果出现无法加载主类的提示，建议参看<a href="2、Java开发环境搭建">Java开发环境搭建</a>检查环境变量是否正确配置。</p><h4 id="Java源文件命名规则"><a href="#Java源文件命名规则" class="headerlink" title="Java源文件命名规则"></a>Java源文件命名规则</h4><p>我们的文件自然不是随意命名的，简单规则如下：</p><ul><li><p>Java源文件后缀一定是.java（建议设置显示文件扩展名），如图：</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/28330406.jpg" alt=""></p></li><li><p>一般来说，Java源文件名是任意的，不过，如果源码定义了public类，那么主文件名必须与public类相同，不信？我们把代码里面public修饰的HelloWorld去掉一个d，javac编译走一个；</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/82305520.jpg" alt=""></p></li><li><p>一般我们使用首字母大写的驼峰式命名法，关于命名规范，后面还会详细说道。</p></li><li><p>Java严格区分大小写</p></li></ul><h4 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h4><p>环境变量一定一定要仔细设置，就这一个小小的HelloWorld，动手操作时真的不一定一帆风顺哦！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发第一个Java程序：HelloWorld……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter1 Java概述" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter1-Java%E6%A6%82%E8%BF%B0/"/>
    
    
      <category term="HelloWorld" scheme="http://yoursite.com/tags/HelloWorld/"/>
    
  </entry>
  
  <entry>
    <title>Chapter1.2 Java开发环境搭建</title>
    <link href="http://yoursite.com/2018/12/03/JavaSE/Chapter1%20%E6%A6%82%E8%BF%B0/2%E3%80%81Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/12/03/JavaSE/Chapter1 概述/2、Java开发环境搭建/</id>
    <published>2018-12-03T14:00:00.000Z</published>
    <updated>2018-12-26T14:56:20.140Z</updated>
    
    <content type="html"><![CDATA[<p>Java开发环境搭建，包含Windows和Linux……</p><a id="more"></a><h2 id="2、Java开发环境搭建"><a href="#2、Java开发环境搭建" class="headerlink" title="2、Java开发环境搭建"></a>2、Java开发环境搭建</h2><h4 id="下载安装JDK"><a href="#下载安装JDK" class="headerlink" title="下载安装JDK"></a>下载安装JDK</h4><ol><li>[Oracle官网下载JDK链接][<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html]" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html]</a></li></ol><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/16068822.jpg" alt=""></p><ol start="2"><li><p>下载完成后运行安装JDK，个人喜欢安装在D盘下；</p></li><li><p>JDK安装目录结构：</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/25079593.jpg" alt=""></p><ul><li>bin：存放工具命令，如javac，java等命令；</li><li>db：安装JavaDB路径；</li><li>include：平台特定的头文件；</li><li>jre：运行Java程序所必须的JRE环境；</li><li>lib：相关的Jar依赖包；</li></ul></li><li><p>配置环境变量（Win10为例）：</p><ol><li><p>依次打开：控制面板——系统和安全——系统——高级系统设置——环境变量——系统变量；</p></li><li><p>新建，变量名：JAVA_HOME，变量值：D:\Program Files\Java\jdk1.8.0_131</p></li><li><p>找到Path，添加：%JAVA_HOME%\bin（注意分号）</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/62249257.jpg" alt=""></p></li><li><p>新建，变量名：classpath，变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\toos.jar;（前面加.表示当前路径，用以强制Java解释器在当前路径下搜索Java类，用；分隔变量）  如图：</p><p><img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/98167969.jpg" alt=""></p><ul><li>注意，配置了classpath，java命令才能被识别到，这个地方很容易出错，请一定注意。</li></ul></li></ol></li><li><p>验证安装：</p><p>快捷键Win+R打开运行——CMD，输入Java运行命令，javac编译命令或Java -version，如下图显示就是安装成功，So easy！！！</p><p>​    <img src="http://pkckn89qb.sabkt.gdipper.com/18-12-26/60291593.jpg" alt=""></p><p>搭建好了环境，我们来跑一个小小的程序，也就是每一个程序员都知道的：HelloWorld</p><h4 id="附1：Linux环境安装JDK："><a href="#附1：Linux环境安装JDK：" class="headerlink" title="附1：Linux环境安装JDK："></a>附1：Linux环境安装JDK：</h4><ol><li><p>下载对应版本的JDK，通常是tar.gz后缀文件；</p></li><li><p>通过xftp客户端上传至Linux环境/usr目录下；</p></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /usr </span><br><span class="line">mkdir java</span><br><span class="line">cp jdk-8u161-linux-i586.tar.gz java/</span><br><span class="line">cd java </span><br><span class="line">tar -xzvf jdk-8u161-linux-i586.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/bashrc</span><br><span class="line"><span class="meta">#</span>文件末尾添加</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_161</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$&#123;JAVA_PATH&#125;:$PATH</span><br></pre></td></tr></table></figure></li><li><p>执行命令使配置生效：<figure class="highlight plain"><figcaption><span>/etc/bashrc```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. 输入```java -version```命令查看java版本发现报错：</span><br><span class="line"></span><br><span class="line">   ```shell</span><br><span class="line">   -bash: /usr/java/jdk1.8.0_161/bin/java: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</span><br></pre></td></tr></table></figure></p><p>出现该问题是因为JDK和系统版本不匹配的问题。</p></li><li><p>执行命令：<figure class="highlight plain"><figcaption><span>install glibc.i686```解决版本问题，输入```java -version```发现已正确安装：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```shell</span><br><span class="line">java version &quot;1.8.0_161&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) Client VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure></p></li></ol><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java开发环境搭建，包含Windows和Linux……&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="JavaSE阶段知识" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Chapter1 Java概述" scheme="http://yoursite.com/categories/Java/JavaSE%E9%98%B6%E6%AE%B5%E7%9F%A5%E8%AF%86/Chapter1-Java%E6%A6%82%E8%BF%B0/"/>
    
    
      <category term="开发环境" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
</feed>
